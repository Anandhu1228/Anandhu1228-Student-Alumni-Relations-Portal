<!-- 
Website developed by Anandhu Mohan for the Alumni Relations Cell of a college. 
Features include:
  - Job portal, Internship portal, Mentorship portal
  - Search functionality for users, students, and alumni
  - Group chat and private individual chat systems
  - Notification system and user profiles for each member
  - Admin panel to control the entire site, handle issues, and manage inquiries
  - Superadmin overseeing the activities of admins and users
  - Maintainer responsible for the main page content and styling, visible to users and external visitors
  - Advanced machine learning features that sort jobs and internships based on user profile preferences
  - Periodic email notifications and security enhancements
-->

<style>

    body{
        background-image: url('/images/logo_transparent1.png');
        background-size: 70% auto;
        background-position: center bottom 55%;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-color: aliceblue;
        /* background-color: rgba(255, 255, 255, 0.8);*/
    }

    .profile_image_internshipportal{
        width: 50px;
        border-radius: 50%;
        cursor: default;
    }

    .internship_posted_name{
        font-weight: bolder;
        cursor: default;
    }

    .profile_view_internship_button{
        width: 100%;
        padding: 10px;
        border-radius: 20px;
        background-color: rgb(38, 82, 164);
        font-weight: 700;
        text-decoration: none;
        color: white;
    }

    .profile_view_internship_button:hover{
        border-radius: 20px;
        color: white;
    }

    .internss{
        width: 100%;
        margin-top: 50px;
        padding: 5px;
        margin-bottom: 50px;
        background-color:rgba(255, 255, 255, 0.8);
        border-radius: 20px;
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.6);
        border: none;
    }

    .heading_head{
        font-weight: bold;
        font-size: 25px;
    }

    .intern_detail_text{
        font-weight:bold;
        color:rgb(38, 82, 164);
    }

    @media (max-width: 768px) {
        body {
            background-image: url('/images/logo1.png');
            background-position: center bottom 40%;
        }
        .heading_head{
            font-weight: bold;
            font-size: 22px;
        }
    }

    .sec-top{
        padding-top: 170px; 
        display: flex; 
        justify-content: flex-end;
    }

    @media (max-width: 1251px) {
        .sec-top{
            padding-top: 150px; 
        }
    }

    @media (max-width: 550px) {
        .sec-top{
            padding-top: 145px; 
        }
    }

    .btn_sort{
        margin-left: auto;
        background-color: rgb(93, 138, 222);
        padding: 8px;
        color: white;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }
    
    .btn_sort:hover{
        background-color: rgb(43, 92, 182);
        color: white;
    }

    @media (max-width: 1199px) {
        .btn_sort{
            font-size: 14px;
        }
    }
    
    @media (max-width: 767px) {
        .btn_sort{
            font-size: 13px;
            font-weight: 500;
            padding: 6px;
        }
    }
    
    @media (max-width: 500px) {
        .btn_sort{
            font-size: 12px;
            font-weight: 500;
            padding: 5px;
        }
    }

    .profileImageAlternate {
        -webkit-user-drag: none;
        user-drag: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit:contain
    }

    .job_you{
        align-items: center;
        text-align: center;
        font-weight: 500;
        color: rgba(28, 56, 107, 0.5);
        margin-bottom: 0px;
        margin-top: 10px;
    }

    @media (max-width: 865px) {
        .job_you{
            font-size: 13px; 
        }
    }

    @media (max-width: 450px) {
        .job_you{
            font-size: 11px; 
        }
    }

    #loading-indicator{
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
    }

    #loading-indicator p{
        margin: 10px 0;
        font-size: 18px;
        font-weight: bold;
    }

    #loading-indicator .spinner{
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    } 

</style>

<section class="sec-top" >
    {{#if machinesort}}
        <a href="/internship_portal" class="btn btn_sort darkcolorchanger2">Sort based on time (newest first)</a>
    {{/if}}
    {{#if timesort}}
        <a href="/internshipportal" class="btn btn_sort darkcolorchanger2">Sort based on your preference</a>
    {{/if}}
</section>
<p class="job_you">Intern requests posted by you won't appear here for you</p>

<section class="container">
    {{#each interns}}
    <div class="card internss">
        <div class="card-body">
            <p class="card-title heading_head">Profile details</p><br>
            <div style="display: flex;">
                <h6 ><strong>Full name : <span class="intern_detail_text blackName">{{this.firstName}} {{this.lastName}}</span></strong></h6>
            </div><br>
            <div style="display: flex;">
                <h6 style="display: inline-block;"><strong>Seeking for <span class="intern_detail_text blackName">{{this.jobintern}}</span> in the field of <span class="intern_detail_text blackName">{{this.Interest}}</span></strong></h6>
            </div><br>
            <div style="display: flex;">
                <h6 style="display: inline-block;"><strong>Current location :&nbsp;</strong></h6>
                <h6  class="card-text intern_detail_text blackName">{{this.LocationCurrent}}</h6>
            </div><br>
            <div style="display: flex;">
                <h6 ><strong>Preffered working mode : <span class="intern_detail_text blackName">{{this.workmode}}</span></strong></h6>
            </div><br>
            <h6 style=""><strong>Posted by : </strong></h6>
            <div style="display: inline-block;padding:20px">
                    <a href="javascript:void(0)">
                        <img class="profile_image_internshipportal profileImageAlternate" src="/user-images/{{this.UserId}}.jpg" alt="Card image cap" draggable="false">
                    </a>
                </div>
                <div style="display: inline-block;">
                    <a style="text-decoration: none;color:black;" href="javascript:void(0)">
                        <p class="internship_posted_name">{{this.Name}}</p>
                    </a>
                </div>
                <div style="display: flex;border-radius:20px;background-color:white;">
                    <a href="javascript:void(0)" onclick="passInternId('{{this._id}}')" class="btn profile_view_internship_button darkcolorchanger2" >view details</a>
                </div>
                
            </div>
        </div>
    </div>
    {{/each}}
    <div id="new_mess_container">
        {{!-- This is where new messages will be appended --}}
    </div>
    <div id="loadingIndicator" style="display:none; text-align: center; margin-top: -40px;">
        <p style="font-weight: bold;">Loading.........</p>
    </div>
</section>

<div id="loading-indicator">
    <div class="spinner"></div>
    <p>Loading...</p>
</div>

<script>

    sessionStorage.setItem("limiterinternship", '{{limit}}');
    const machinesort = '{{machinesort}}'
    const timesort = '{{timesort}}'
    let URL = null
    if(timesort == "true"){
        URL = '/get_remaining_interns'
    } else if(machinesort == "true"){
        URL = '/get_remaining_intern'
    }

    function sendTimestampOnUnload() {
        const timestamp = new Date().toISOString();

        // Use navigator.sendBeacon for asynchronous data transmission during unload
        const url = '/send_timestamp_leave_internportal';
        const body = JSON.stringify({ timestamp });
        const blob = new Blob([body], { type: 'application/json' });

        navigator.sendBeacon(url, blob);
        //window.location.reload();
    }
    window.addEventListener('beforeunload', sendTimestampOnUnload);


    function passInternId(InternId) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/internship-details';
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'InternId';
        input.value = InternId;
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }


    function showLoadingIndicator() {
        $('#loading-indicator').show();
        $('body').css('overflow', 'hidden');
    }


    function hideLoadingIndicator() {
        $('#loading-indicator').hide();
        $('body').css('overflow', 'auto');
    }


    window.onload = function() {
        let bottomReached = false;
        let initialLoad = true; // Flag to track initial load
        const limit = 10;
        let skip = parseInt(sessionStorage.getItem('limiterinternship')) || 0; // Initialize skip variable

        async function checkScroll() {
            const scrollPosition = window.scrollY; // Current scroll position
            const windowHeight = window.innerHeight; // Height of the viewport
            const documentHeight = document.documentElement.scrollHeight; // Total scrollable height of the document

            if (initialLoad) {
                initialLoad = false;
                return;
            }

            // Check if the user has scrolled near the bottom
            if ((scrollPosition + windowHeight >= documentHeight - 30) && !bottomReached) {
                bottomReached = true;

                // Show the loading indicator
                $("#loadingIndicator").show();
                showLoadingIndicator();

                let response = await $.ajax({
                    url: URL,
                    method: 'post',
                    data: {
                        skip: skip,
                        limit: limit
                    }
                });

                if (response.success) {
                    const nem_intern_s = response.interns;
                    if (nem_intern_s && nem_intern_s.length > 0) {
                        skip += limit; // Update skip value
                        sessionStorage.setItem('limiterinternship', skip);

                        nem_intern_s.forEach(intern_s => {
                            // Append each job to the existing posts container
                            $("#new_mess_container").append(createInternCard(intern_s));
                        });

                        // Hide the loading indicator
                        $("#loadingIndicator").hide();
                        $('body').css('overflow', 'auto');
                    } else {
                        // Hide the loading indicator if no more jobs
                        $("#loadingIndicator").hide();
                        $('body').css('overflow', 'auto');
                    }
                } else {
                    // Hide the loading indicator on error
                    $("#loadingIndicator").hide();
                    $('body').css('overflow', 'auto');
                }
            } else if (scrollPosition + windowHeight < documentHeight - 30) {
                bottomReached = false;
            }
        }

        // Listen for scroll events on the window
        window.addEventListener('scroll', checkScroll);
    };


    function createInternCard(intern) {
        const card = document.createElement('div');
        card.className = 'card internss';

        // Card body
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body';

        // Profile details
        const profileDetails = document.createElement('p');
        profileDetails.className = 'card-title heading_head';
        profileDetails.textContent = 'Profile details';
        cardBody.appendChild(profileDetails);
        cardBody.appendChild(document.createElement('br'));

        // Full Name
        const fullNameContainer = document.createElement('div');
        fullNameContainer.style.display = 'flex';

        const fullName = document.createElement('h6');
        fullName.innerHTML = `<strong>Full name : <span class="intern_detail_text blackName">${intern.firstName} ${intern.lastName}</span></strong>`;
        fullNameContainer.appendChild(fullName);
        cardBody.appendChild(fullNameContainer);
        cardBody.appendChild(document.createElement('br'));

        // Seeking for and Interest
        const seekingContainer = document.createElement('div');
        seekingContainer.style.display = 'flex';

        const seekingText = document.createElement('h6');
        seekingText.style.display = 'inline-block';
        seekingText.innerHTML = `<strong>Seeking for <span class="intern_detail_text blackName">${intern.jobintern}</span> in the field of <span class="intern_detail_text blackName">${intern.Interest}</span></strong>`;
        seekingContainer.appendChild(seekingText);
        cardBody.appendChild(seekingContainer);
        cardBody.appendChild(document.createElement('br'));

        // Current Location
        const locationContainer = document.createElement('div');
        locationContainer.style.display = 'flex';

        const locationText = document.createElement('h6');
        locationText.style.display = 'inline-block';
        locationText.innerHTML = '<strong>Current location :&nbsp;</strong>';
        locationContainer.appendChild(locationText);

        const locationValue = document.createElement('h6');
        locationValue.className = 'card-text intern_detail_text blackName';
        locationValue.textContent = intern.LocationCurrent;
        locationContainer.appendChild(locationValue);
        cardBody.appendChild(locationContainer);
        cardBody.appendChild(document.createElement('br'));

        // Preferred Working Mode
        const workModeContainer = document.createElement('div');
        workModeContainer.style.display = 'flex';

        const workModeText = document.createElement('h6');
        workModeText.innerHTML = `<strong>Preffered working mode : <span class="intern_detail_text blackName">${intern.workmode}</span></strong>`;
        workModeContainer.appendChild(workModeText);
        cardBody.appendChild(workModeContainer);
        cardBody.appendChild(document.createElement('br'));

        // Posted By
        const postedByHeading = document.createElement('h6');
        postedByHeading.innerHTML = '<strong>Posted by : </strong>';
        cardBody.appendChild(postedByHeading);

        const postedByContainer = document.createElement('div');
        postedByContainer.style.display = 'inline-block';
        postedByContainer.style.padding = '20px';

        const profileLink = document.createElement('a');
        profileLink.href = 'javascript:void(0)';

        const profileImg = document.createElement('img');
        profileImg.className = 'profile_image_internshipportal profileImageAlternate';
        profileImg.src = `/user-images/${intern.UserId}.jpg`;
        profileImg.alt = 'Card image cap';
        profileImg.draggable = false;

        profileLink.appendChild(profileImg);
        postedByContainer.appendChild(profileLink);
        cardBody.appendChild(postedByContainer);

        const nameContainer = document.createElement('div');
        nameContainer.style.display = 'inline-block';

        const nameLink = document.createElement('a');
        nameLink.style.textDecoration = 'none';
        nameLink.style.color = 'black';
        nameLink.href = 'javascript:void(0)';

        const nameText = document.createElement('p');
        nameText.className = 'internship_posted_name';
        nameText.textContent = intern.Name;
        nameLink.appendChild(nameText);

        nameContainer.appendChild(nameLink);
        cardBody.appendChild(nameContainer);

        // View Details Button
        const buttonContainer = document.createElement('div');
        buttonContainer.style = 'display: flex;border-radius:20px;background-color:white;';

        const viewDetailsButton = document.createElement('a');
        viewDetailsButton.href = 'javascript:void(0)';
        viewDetailsButton.className = 'btn profile_view_internship_button darkcolorchanger2';
        viewDetailsButton.textContent = 'view details';
        viewDetailsButton.onclick = () => passInternId(intern._id);

        buttonContainer.appendChild(viewDetailsButton);
        cardBody.appendChild(buttonContainer);

        card.appendChild(cardBody);

        return card;
    }
    
</script>
