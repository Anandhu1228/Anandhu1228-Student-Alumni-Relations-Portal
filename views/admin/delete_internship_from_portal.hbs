<!-- 
Website developed by Anandhu Mohan for the Alumni Relations Cell of a college. 
Features include:
  - Job portal, Internship portal, Mentorship portal
  - Search functionality for users, students, and alumni
  - Group chat and private individual chat systems
  - Notification system and user profiles for each member
  - Admin panel to control the entire site, handle issues, and manage inquiries
  - Superadmin overseeing the activities of admins and users
  - Maintainer responsible for the main page content and styling, visible to users and external visitors
  - Advanced machine learning features that sort jobs and internships based on user profile preferences
  - Periodic email notifications and security enhancements
-->

<style>

    body{
        background-image: url('/images/logo_transparent1.png');
        background-size: 70% auto;
        background-position: center bottom 55%;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-color: aliceblue;
        /* background-color: rgba(255, 255, 255, 0.8);*/
    }

    .profile_image_internshipportal{
        width: 50px;
        border-radius: 50%;
    }

    .internship_posted_name{
        font-weight: bolder;
    }

    .profile_view_internship_button,.profile_delete_internship_button{
        width: 100%;
        padding: 10px;
        border-radius: 20px;
        background-color: rgb(38, 82, 164);
        font-weight: 700;
        text-decoration: none;
        color: white;
        transition: background-color 0.3s ease;
    }

    .profile_view_internship_button:hover{
        border-radius: 20px;
        background-color: rgb(100, 173, 213);
        color: white;
    }

    .profile_delete_internship_button:hover{
        border-radius: 20px;
        background-color: rgb(228, 15, 15);
        color: white;
    }
    
    .internss{
        width: 100%;
        margin-top: 50px;
        padding: 5px;
        margin-bottom: 50px;
        background-color:rgba(255, 255, 255, 0.8);
        border-radius: 20px;
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.6);
        border: none;
    }

    .heading_head{
        font-weight: bold;
        font-size: 25px;
    }

    .intern_detail_text{
        font-weight:bold;
        color:rgb(38, 82, 164);
    }

    

    @media (max-width: 768px) {
        body {
            background-image: url('/images/logo1.png');
            background-position: center bottom 40%;
        }
        .heading_head{
            font-weight: bold;
            font-size: 22px;
        }
    }

    .profileImageAlternate {
        -webkit-user-drag: none;  /* Safari */
        user-drag: none;           /* Non-prefixed version */
    }

    #loading-indicator{
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
    }

    #loading-indicator p{
        margin: 10px 0;
        font-size: 18px;
        font-weight: bold;
    }

    #loading-indicator .spinner{
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    } 

</style>

<section class="container" style="padding-top: 100px;">
    <div>
    {{#each interns}}
        <div class="card internss" id="internss_{{this._id}}">
            <div class="card-body">

                <p class="card-title heading_head">Profile details</p><br>

                <div style="display: flex;">
                    <h6 ><strong>Full name : <span class="intern_detail_text blackName">{{this.firstName}} {{this.lastName}}</span></strong></h6>
                </div><br>

                <div style="display: flex;">
                    <h6 style="display: inline-block;"><strong>Seeking for <span class="intern_detail_text blackName">{{this.jobintern}}</span> in the field of <span class="intern_detail_text blackName">{{this.Interest}}</span></strong></h6>
                </div><br>

                <div style="display: flex;">
                    <h6 style="display: inline-block;"><strong>Current location :&nbsp;</strong></h6>
                    <h6  class="card-text intern_detail_text blackName">{{this.LocationCurrent}}</h6>
                </div><br>

                <div style="display: flex;">
                    <h6 ><strong>Preffered working mode : <span class="intern_detail_text blackName">{{this.workmode}}</span></strong></h6>
                </div><br>

                <h6 style=""><strong>Posted by : </strong></h6>
                <div style="display: inline-block;padding:20px">
                        <a  href="javascript:void(0)" onclick="adminViewProfile('{{this.UserId}}')">
                            <img class="profile_image_internshipportal profileImageAlternate" draggable="false" src="/user-images/{{this.UserId}}.jpg" alt="Card image cap" style="width: 50px;height: 50px;border-radius: 50%;object-fit:contain">
                        </a>
                    </div>
                    <div style="display: inline-block;">
                        <a style="text-decoration: none;color:black;"  href="javascript:void(0)" onclick="adminViewProfile('{{this.UserId}}')">
                            <p class="internship_posted_name">{{this.Name}}</p>
                        </a>
                    </div>
                    <div style="display: flex;border-radius:20px;background-color:white;">
                        <a href="javascript:void(0)" onclick="passInternId('{{this._id}}')" class="btn profile_view_internship_button darkcolorchanger2" >View details</a>
                    </div>
                    <div style="display: flex;border-radius:20px;background-color:white; margin-top:10px;">
                        <a href="javascript:void(0)" onclick="deleteinternsship_by_admin('{{this._id}}','{{this.UserId}}','{{this.Name}}')" class="btn profile_delete_internship_button darkcolorchanger2" >Delete</a>
                    </div>   
                </div>

            </div>
        </div>
    {{/each}}
    <div id="new_mess_container">
        {{!-- This is where new messages will be appended --}}
    </div>
    <div id="loadingIndicator" style="display:none; text-align: center; margin-top: -40px;">
        <p style="font-weight: bold;">Loading.........</p>
    </div>
    </div>
</section>
<div id="loading-indicator">
    <div class="spinner"></div>
    <p>Loading...</p>
</div>

<script>
    sessionStorage.setItem("limiterinternAdminDelete", '{{limit}}');

    function deleteinternsship_by_admin(internId,user_id,user_name) {
        if (confirm("Do you want to delete this internship request from the Portal?")) {
            var del_cont = document.getElementById("internss_"+internId)
            $.ajax({
            url: '/admin/delete_admin_intern_form_portal',
            method: 'post',
            data: {
                InterN: internId,
                ProfilEID:user_id,
                ProfilENAME:user_name
            },
            success: function (response) {
                if (response.deleteIntern) {
                    del_cont.remove()
                }
            },
            });
        }
    }


    function sendCountOnUnload() {
      const messageCount = document.querySelectorAll('.internss').length;  
        // Use navigator.sendBeacon for asynchronous data transmission during unload
        const url = '/admin/send_internCount_leave_internportal_admin';
        const body = JSON.stringify({ messageCount });
        const blob = new Blob([body], { type: 'application/json' });
        navigator.sendBeacon(url, blob);
    }
    window.addEventListener('beforeunload', sendCountOnUnload);


    function passInternId(internID) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/admin/internship_details';
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'internID';
        input.value = internID;
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }


    function adminViewProfile(profileId) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/admin/admin-view-profile';
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'profileId';
        input.value = profileId;
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }


    window.onload = function() {
        let bottomReached = false;
        let initialLoad = true; // Flag to track initial load
        const limit = 10;
        let skip = parseInt(sessionStorage.getItem('limiterinternAdminDelete')) || 0; // Initialize skip variable

        async function checkScroll() {
            const scrollPosition = window.scrollY; // Current scroll position
            const windowHeight = window.innerHeight; // Height of the viewport
            const documentHeight = document.documentElement.scrollHeight; // Total scrollable height of the document

            if (initialLoad) {
                initialLoad = false;
                return;
            }

            // Check if the user has scrolled near the bottom
            if ((scrollPosition + windowHeight >= documentHeight - 30) && !bottomReached) {
                bottomReached = true;

                // Show the loading indicator
                $("#loadingIndicator").show();
                showLoadingIndicator();

                let response = await $.ajax({
                    url: "/admin/load_more_interns",
                    method: 'post',
                    data: {
                        skip: skip,
                        limit: limit
                    }
                });

                if (response.success) {
                    const nem_intern_s = response.interns;
                    if (nem_intern_s && nem_intern_s.length > 0) {
                        skip += limit; // Update skip value
                        sessionStorage.setItem('limiterinternAdminDelete', skip);

                        nem_intern_s.forEach(intern_s => {
                            // Append each job to the existing posts container
                            $("#new_mess_container").append(generateInternProfileCard(intern_s));
                        });

                        // Hide the loading indicator
                        $("#loadingIndicator").hide();
                        $('body').css('overflow', 'auto');
                    } else {
                        // Hide the loading indicator if no more interns
                        $("#loadingIndicator").hide();
                        $('body').css('overflow', 'auto');
                    }
                } else {
                    // Hide the loading indicator on error
                    $("#loadingIndicator").hide();
                    $('body').css('overflow', 'auto');
                }
            } else if (scrollPosition + windowHeight < documentHeight - 30) {
                bottomReached = false;
            }
        }

        // Listen for scroll events on the window
        window.addEventListener('scroll', checkScroll);
    };


    function showLoadingIndicator() {
        $('#loading-indicator').show();
        $('body').css('overflow', 'hidden');
    }


    function hideLoadingIndicator() {
        $('#loading-indicator').hide();
        $('body').css('overflow', 'auto');
    }


    function generateInternProfileCard(internData) {
        // Create main card container
        const card = document.createElement('div');
        card.className = 'card internss';
        card.id = 'internss_'+internData._id

        // Create card body
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body';

        // Profile Details Title
        const profileDetailsTitle = document.createElement('p');
        profileDetailsTitle.className = 'card-title heading_head';
        profileDetailsTitle.textContent = 'Profile details';
        cardBody.appendChild(profileDetailsTitle);
        cardBody.appendChild(document.createElement('br'));

        // Add Full Name
        const fullNameContainer = document.createElement('div');
        fullNameContainer.style.display = 'flex';

        const fullName = document.createElement('h6');
        fullName.innerHTML = `<strong>Full name : <span class="intern_detail_text blackName">${internData.firstName} ${internData.lastName}</span></strong>`;
        fullNameContainer.appendChild(fullName);
        cardBody.appendChild(fullNameContainer);
        cardBody.appendChild(document.createElement('br'));

        // Add Seeking Job Details
        const seekingJobContainer = document.createElement('div');
        seekingJobContainer.style.display = 'flex';

        const seekingJob = document.createElement('h6');
        seekingJob.style.display = 'inline-block';
        seekingJob.innerHTML = `<strong>Seeking for <span class="intern_detail_text blackName">${internData.jobintern}</span> in the field of <span class="intern_detail_text blackName">${internData.Interest}</span></strong>`;
        seekingJobContainer.appendChild(seekingJob);
        cardBody.appendChild(seekingJobContainer);
        cardBody.appendChild(document.createElement('br'));

        // Add Current Location
        const currentLocationContainer = document.createElement('div');
        currentLocationContainer.style.display = 'flex';

        const currentLocationLabel = document.createElement('h6');
        currentLocationLabel.style.display = 'inline-block';
        currentLocationLabel.innerHTML = '<strong>Current location :&nbsp;</strong>';
        currentLocationContainer.appendChild(currentLocationLabel);

        const currentLocation = document.createElement('h6');
        currentLocation.className = 'card-text intern_detail_text blackName';
        currentLocation.textContent = internData.LocationCurrent;
        currentLocationContainer.appendChild(currentLocation);
        cardBody.appendChild(currentLocationContainer);
        cardBody.appendChild(document.createElement('br'));

        // Add Preferred Work Mode
        const workModeContainer = document.createElement('div');
        workModeContainer.style.display = 'flex';

        const workMode = document.createElement('h6');
        workMode.innerHTML = `<strong>Preffered working mode : <span class="intern_detail_text blackName">${internData.workmode}</span></strong>`;
        workModeContainer.appendChild(workMode);
        cardBody.appendChild(workModeContainer);
        cardBody.appendChild(document.createElement('br'));

        // Add Posted By Section
        const postedByTitle = document.createElement('h6');
        postedByTitle.innerHTML = '<strong>Posted by : </strong>';
        cardBody.appendChild(postedByTitle);

        const profileContainer = document.createElement('div');
        profileContainer.style = 'display: inline-block;padding:20px';

        const profileImage = document.createElement('img');
        profileImage.className = 'profile_image_internshipportal profileImageAlternate';
        profileImage.draggable = false;
        profileImage.src = `/user-images/${internData.UserId}.jpg`;
        profileImage.alt = 'Card image cap';
        profileImage.style = 'width: 50px;height: 50px;border-radius: 50%;object-fit:contain';

        const profileLink = document.createElement('a');
        profileLink.href = 'javascript:void(0)';
        profileLink.onclick = function () {
            adminViewProfile(internData.UserId);
        };
        profileLink.appendChild(profileImage);
        profileContainer.appendChild(profileLink);
        cardBody.appendChild(profileContainer);

        const profileNameContainer = document.createElement('div');
        profileNameContainer.style = 'display: inline-block;';

        const profileName = document.createElement('p');
        profileName.className = 'internship_posted_name';
        profileName.textContent = internData.Name;

        const nameLink = document.createElement('a');
        nameLink.style = 'text-decoration: none;color:black;';
        nameLink.href = 'javascript:void(0)';
        nameLink.onclick = function () {
            adminViewProfile(internData.UserId);
        };
        nameLink.appendChild(profileName);
        profileNameContainer.appendChild(nameLink);

        cardBody.appendChild(profileNameContainer);

        // Add View Details Button
        const viewDetailsContainer = document.createElement('div');
        viewDetailsContainer.style = 'display: flex;border-radius:20px;background-color:white;';

        const viewDetailsButton = document.createElement('a');
        viewDetailsButton.href = 'javascript:void(0)';
        viewDetailsButton.className = 'btn profile_view_internship_button darkcolorchanger2';
        viewDetailsButton.textContent = 'View details';
        viewDetailsButton.onclick = function () {
            passInternId(internData._id);
        };
        viewDetailsContainer.appendChild(viewDetailsButton);
        cardBody.appendChild(viewDetailsContainer);

        // Add Delete Button
        const deleteButtonContainer = document.createElement('div');
        deleteButtonContainer.style = 'display: flex;border-radius:20px;background-color:white; margin-top:10px;';

        const deleteButton = document.createElement('a');
        deleteButton.href = 'javascript:void(0)';
        deleteButton.className = 'btn profile_delete_internship_button darkcolorchanger2';
        deleteButton.textContent = 'Delete';
        deleteButton.onclick = function () {
            deleteinternsship_by_admin(internData._id, internData.UserId, internData.Name);
        };
        deleteButtonContainer.appendChild(deleteButton);
        cardBody.appendChild(deleteButtonContainer);

        // Append card body to card
        card.appendChild(cardBody);

        return card;
    }

</script>
