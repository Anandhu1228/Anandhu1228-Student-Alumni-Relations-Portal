<!-- 
Website developed by Anandhu Mohan for the Alumni Relations Cell of a college. 
Features include:
  - Job portal, Internship portal, Mentorship portal
  - Search functionality for users, students, and alumni
  - Group chat and private individual chat systems
  - Notification system and user profiles for each member
  - Admin panel to control the entire site, handle issues, and manage inquiries
  - Superadmin overseeing the activities of admins and users
  - Maintainer responsible for the main page content and styling, visible to users and external visitors
  - Advanced machine learning features that sort jobs and internships based on user profile preferences
  - Periodic email notifications and security enhancements
-->

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<style>

    body{
        background-image: url('/images/logo_transparent1.png');
        background-size: 70% auto;
        background-position: center bottom 55%;
        background-repeat: no-repeat;
        background-color:aliceblue;
    }

    .whole_body_mentor_main{
        padding-top: 150px;
    }

    .header_heading{
        text-align: center;
        padding: 10px;
        background-color: rgb(60, 118, 225);
        color: white;
        font-size: 20px;
        font-weight: 510;
        padding-top: 20px;
    }

    .add-button {
        background-color: #f3c306;
        color: rgb(0, 0, 0);
        padding: 10px 20px;
        font-weight: bold;
        font-size: 16px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .popup-form {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background-color: #f1f1f1;
        border: 1px solid #ccc;
        border-radius: 5px;
        z-index: 2001;
        width: 70%;
    }

    .popup-form .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .popup-form .close:hover {
        color: red; /* Change the color on hover as desired */
    }

    .popup-form textarea {
        width: 100%;
        margin-bottom: 10px;
        border-radius: 15px;
        border: none;
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.4);
        padding: 10px;
        font-size: 18px;
        min-height: 180px;
        max-height: 470px;
        box-sizing: border-box;
        resize: vertical; /* Enable vertical resizing */
        overflow: auto; /* Add scrollbar when content exceeds textarea height */
    }

    .popup-form button {
        background-color: #2d649f;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        border: 1px solid #f1f1f1;
    }

    .user-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .user-circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        overflow: hidden;
        margin-right: 10px;
    }

    .user-name {
        font-weight: bold;
        font-size: 15px;
        margin-left: -10px;
        margin-right: 5px;
    }

    .mentorcontainer{
        /*background-color: rgba(16, 161, 239, 0.585);*/
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
        min-height: 100px;
        height: auto;
        background-color: rgba(255, 255, 255, 0.8);
        width: 80%;
        margin-left: auto;
        margin-right: 20px;
        padding: 20px;
        position: relative;
        border-radius: 10px 10px 0px 10px;
        margin-top: 30px;
    }

    .messageMentor{
        font-size: 15px;
        font-weight: 600;
        word-wrap: break-word;
        min-height: 30px;
        padding: 20px;
        padding-left: 50px;
        padding-top: 3px;
        padding-bottom: 3px;
    }

    .mentor-content {
        overflow: hidden;
        max-height: calc(1.5em * 6); /* Limit to 6 lines */
        transition: max-height 0.3s ease; /* Smooth transition for expanding/collapsing */
    }

    .mentor-content.expanded {
        max-height: none; /* Allow full expansion */
    }

    .show-more {
        color: #4a7dc4;
        cursor: pointer;
        margin-top: 5px;
        display: none;
    }

    .show-more.active {
        display: inline;
    }

    .replycontainer{
        /*background-color: rgb(123, 180, 230);*/
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
        min-height: 100px;
        height: auto;
        width: 70%;
        position: relative;
        background-color: rgba(255, 255, 255, 0.8);
        margin-left: auto;
        margin-right: 20px;
        padding: 20px;
        border-bottom: 1px solid #a9a1a1;
        transition: background-color 2.3s ease;
        overflow: auto; 
        word-wrap: break-word;
    }

    .replycontainer:last-child {
        border-radius: 0px 0px 10px 10px;
    }

    .replyMentor{
        font-size: 15px;
        font-weight: 600;
        min-height: 30px;
        padding: 20px;
        padding-left: 50px;
        padding-top: 3px;
        padding-bottom: 3px;
        overflow: auto; 
        word-wrap: break-word;
    }

    @media (max-width: 860px) {
        .replyMentor{
            font-size: 14px;
        }
        .messageMentor{
            font-size: 14px;
        }
    }

    .reply-btn{
        text-decoration:none;
        font-size: 14px;
        font-weight: 550;
        color: #0868b7;
    }

    .reply-btn:hover{
        color:blue;
        text-decoration:none;
    }

    .search-container {
        position: relative;
        width: 96%;
        margin-top: 20px;
        margin-bottom: 20px;
        display: block;
        margin: 0 auto;
        margin-bottom:20px;
        margin-top:20px;
    }

    .search-bar {
        width: 100%;
        padding: 20px;
        font-weight: bold;
        border: none;
        border-radius: 20px;
        font-size: 16px;
        outline: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
    }

    .search-bar:hover{
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.8);
    }

    .search-icon {
        background-color: #5a96d7;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        right: 15px;
        color: #555;
        font-size: 18px;
        font-weight: bold;
        border-radius: 10px;
    }

    .search-icon:hover{
        background-color: #2d649f;
    }

    .profile_data{
        background-color:rgb(206, 214, 230);
        width: fit-content;
        border-radius: 20px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
    }

    .add_button{
        font-weight: bold;
        width: 300px;
        padding: 8px;
        height: fit-content;
        background-color: rgb(93, 138, 222);
        color:white;
        border-radius: 20px;
        border: none;
        transition: background-color 0.3s ease;
        margin-right: 10px;
    }

    .add_button:hover{
        background-color: rgb(139, 162, 206);
    }

    .more_search_button{
        font-weight: bold; 
        width: 300px;
        padding: 8px;
        height: fit-content;
        background-color: rgb(93, 138, 222);
        color: white;
        border-radius: 20px;
        border: none;
        transition: background-color 0.3s ease;
        margin-left: 10px;
    }

    .more_search_button:hover{
        background-color: rgb(139, 162, 206);
    }

    .button_container{
        display: flex;
        width: 96%;
        height: 15px;
        margin: auto;
        justify-content: space-between;
        margin-bottom: 40px;
    }

    .all_bottom_container{
        background-color: rgb(182, 206, 242);
        padding: 15px;
        border-radius: 20px;
        margin-top: 80px;
        padding-bottom: 1px;
        border: 2px solid rgb(182, 206, 242);
    }

    .athead_name{
        font-size: 13px;
        font-weight: 600;
        color: rgb(93, 138, 222);
        cursor: pointer;
    }

    @media (max-width:1550px) {
        .replycontainer{
            width: 80%;
            margin-right: 10px;
        }
        .mentorcontainer{
            width: 96%;
            margin-right: 10px;
        }
        .popup-form {
            width: 90%;
        }
        .athead_name{
            font-weight:500;
            font-size:13px
        }
    }

    @media (max-width:600px) {
        .search-bar {
            font-weight: bold;
            border-radius: 20px;
            font-size: 10px;
        }
        .search-icon{
            font-size: 13px;
            padding: 6px;
        }
        .reply-btn{
            font-size: 13px;
        }
        .replyMentor{
            font-size: 13px;
            font-weight: 650;
            padding: 5px;
            padding-top: 2px;
            padding-bottom: 2px;
            padding-left: 20px;
        }
        .messageMentor{
            font-size: 13px;
            padding: 5px;
            font-weight: 650;
            padding-top: 2px;
            padding-bottom: 2px;
            padding-left: 20px;
        }
        .user-name{
            font-size: 12px;
        }
        .add_button{
            font-weight: bold;
            font-size: 12px;
            width: 300px;
            padding: 10px;
        }
        .more_search_button{
            font-weight: bold;
            font-size: 12px;
            width: 300px;
            padding: 10px;
            color: white;
        }
        .replycontainer{
            width: 80%;
            margin-right: 5px;
        }
        .mentorcontainer{
            width: 96%;
            margin-right: 5px;
        }
        .athead_name{
            font-weight:400;
            font-size:13px
        }
        .header_heading{
            font-size: 14px;
            padding-top: 10px;
        }
        .popup-form {
            width: 96%;
        }
    }

    @media (max-width:550px) {
        .whole_body_mentor_main{
            padding-top: 140px;
        }
    }

    .option_div {
        position: absolute;
        top: 10px;
        right: 15px;
        cursor: pointer;
    }

    .dropdownND {
        display: none;
        position: absolute;
        top: 30px;
        right: 0;
        background-color: rgb(255, 255, 255);
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.4);
        border-radius: 5px;
        z-index: 997;
    }

    .dropdownND ul {
        list-style-type: none;
        padding: 3px;
        margin: 0;
    }

    .dropdownND ul li {
        padding-left: 5px;
        padding-right: 5px;
        font-weight: 600;
        cursor: pointer;
    }

    @media (max-width: 500px) {
        .dropdownND ul li {
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
        }
    }

    .dropdownND ul li:hover {
        background-color: #ffffff;
        border-radius: 8px;
    }

    .emoji-popup {
        display: none;
        position: absolute;
        top: 30px;
        right: 0;
        z-index: 997;
        background-color: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.4);
        border-radius: 5px;
        padding: 10px;
    }

    .emoji-popup span {
        font-size: 24px;
        margin: 5px;
        cursor: pointer;
        display: inline-block;
    }

    @media (max-width: 900px) {
        .emoji-popup span {
            font-size: 18px;
        }
    }

    @media (max-width: 620px) {
        .emoji-popup span {
            font-size: 16px;
        }
    }

    .emoji-popup span:hover {
        background-color: #ffffff;
        border-radius: 50%;
    }

    .reply_del_div{
        position: absolute;
        left: 0px;
        bottom: 5px;
        display: flex;
        margin-bottom:0px;
        margin-left: 20px;
    }

    .reaction_div{
        position:absolute;
        right: 2px;
        cursor: pointer;
        bottom: 0px;
        background-color: rgb(255, 255, 255);
        border-radius: 20px;
        box-shadow: 0 0px 4px rgba(0, 0, 0, 0.4);
    }

    .reaction_thumb{
        margin-bottom: 0px;
        font-size: 18px;
        margin-right: 10px;
    }

    .count_reaction{
        font-weight: bold;
        font-size: 15px;
        margin-right: 1px;
        margin-left: 10px;
    }

    .popupform_view_reactions{
        display: none;
        padding: 20px;
        position: fixed;
        top: 50%;
        left: 50%;
        background-color: #ffffff;
        transform: translate(-50%, -50%);
        border-radius: 5px;
        z-index: 2001;
        min-width: 30%;
        max-width: 90%;
        max-height: 65vh;
        min-height: 20vh;
        height: auto;
        overflow-y: auto;
        border-radius: 20px;
        box-shadow: 0 4px 30px 15px rgba(0, 0, 0, 0.2);
    }

    @media (max-width: 1270px) {
        .popupform_view_reactions{
            min-width: 60%;
            max-width: 90%;
        }
    }

    @media (max-width: 950px) {
        .popupform_view_reactions{
            min-width: 80%;
            max-width: 90%;
        }
    }

    .close_pop_up_view_reactions{
        font-size: 15px;
        z-index: 105;
        position: absolute; 
        top:5px; 
        right:10px;
        cursor: pointer;
    }

    .close_pop_up_view_reactions:hover{
        color: red;
    }

    .close_button{
        text-align: right;
        display:block;
        margin-bottom: 30px;
    }

    .no-scroll {
        overflow: hidden;
    }

    .user_circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        overflow: hidden;
        margin-right: 10px;
    }

    .user_image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .p_emoji{
        margin-bottom: 0px;
        display: flex;
        margin-left:auto;
        margin-right:60px;
    }

    .p_in_like_body_turnedon{
        font-weight:bold;
        margin-bottom:0px;
        color:black;
        cursor:pointer;
    }

    .reaction_divider{
        display: flex;
        align-items:center; 
        margin-bottom: 20px;
    }

    @media (max-width: 1420px) {
        .p_emoji{
            margin-right: 10px;
        }
    }

    @media (max-width: 1250px) {
        .header_heading{
            padding-top: 8px;
            font-size: 16px;
        }
    }

    @media (max-width: 850px) {
        .p_in_like_body_turnedon{
            font-size: 14px;
        }
    }

    @media (max-width: 450px) {
        .p_emoji{
            margin-right:9px;
        }
        .p_in_like_body_turnedon{
            font-size: 12px;
        }
        .popupform_view_reactions{
            padding: 15px;
        }
    }

    .bot_p_1{
        margin-top:40px;
        font-weight: 600;
        font-size:14px;
        margin-bottom:5px;
        color:grey;
        text-align: center;
    }

    .bot_p_2{
        font-weight: 600;
        font-size:14px;
        margin-bottom:0px;
        color:grey;
        text-align: center;
    }

    @media (max-width: 950px) {
        .bot_p_1{
            font-size: 10px;
        }
        .bot_p_2{
            font-size: 10px;
        }
    }

    .comment_p_actual_rep{
        color: rgb(93, 138, 222);
        font-weight:bold;
        font-size:11px;
        margin-bottom:0px;
    }

    .highlight {
        background-color: rgb(255, 230, 0) !important; /* Change this color as needed */
        transition: background-color 0.5s ease;
    }

    #questionInputReply::placeholder {
        font-size: 14px;
    }

    #replyInput::placeholder {
        font-size: 14px;
    }

    #loading-indicator_loader {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
    }

    #loading-indicator_loader p {
        margin: 10px 0;
        font-size: 18px;
        font-weight: bold;
    }

    #loading-indicator_loader .spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .p_men_indi{
        margin-bottom: 5px;
        font-weight: bold;
        font-size: 12px;
        margin-top: -10px;
        align-items: center;
        text-align: center;
    }
    @media (max-width: 1118px) {
        .p_men_indi{
            font-size: 10px;
        }
    }

    .profileImageAlternate {
        -webkit-user-drag: none;
        user-drag: none;
    }

    @media (max-width: 450px){
        .reaction_thumb{
            font-size: 15px;
        }

        .count_reaction{
            font-size: 12px;
        }
    }

    .popup_overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        z-index: 999;  /* Layer above the main content */
        cursor: not-allowed;  /* Optional: Change cursor to indicate no interaction */
    }

</style>

<div class="whole_body_mentor_main" id="whole_body_mentor_main">
<div class="header_heading darkcolorchanger3">Welcome to Mentorship Portal</div>
<div id = "whole_mentor_body" class="container-fluid">
    <div id="new_mess_container">
        {{!-- This is where new messages will be appended --}}
    </div>
    <div id="loadingIndicator" style="display:none; text-align: center;">
        <!-- Your loading indicator (spinner, text, etc.) -->
        <p>Loading...</p>
    </div>
    {{#each mentors}}
        <div id="{{this._id}}" style="position: relative;">
            <div class="mentorcontainer" 
                onmousedown="startPressTimer('{{this._id}}')" 
                onmouseup="handlePressRelease()" 
                onmouseleave="handlePressRelease()" 
                ontouchstart="startPressTimer('{{this._id}}')" 
                ontouchend="handlePressRelease()" 
                id="mentor_c_o_ntainr_{{this._id}}">
                <div class="option_div" onclick="view_mess_options('{{this._id}}',event)">
                    <i class="fa-solid fa-ellipsis" style="font-size: 22px;"></i>
                    <div class="dropdownND" id="dropdown-{{this._id}}">
                        <ul>
                            <li onclick="showEmojiPopup('{{this._id}}',event)">React</li>
                            {{#compare this.userId "===" ../userId}}
                            <li onclick="deleteMentor('{{this._id}}')">delete</li>
                            <li onclick="showQuestionEditForm('{{this._id}}','{{this.questionInput}}')">edit</li>
                            {{/compare}}
                        </ul>
                    </div>
                </div>

                <div class="emoji-popup right_color_box" id="emoji-popup-{{this._id}}">
                    <span onclick="selectEmoji('{{this._id}}', '{{this.reactions.length}}', '{{stringify this.reactions}}', '👍')">👍</span>
                    <span onclick="selectEmoji('{{this._id}}', '{{this.reactions.length}}', '{{stringify this.reactions}}', '❤️')">❤️</span>
                    <span onclick="selectEmoji('{{this._id}}', '{{this.reactions.length}}', '{{stringify this.reactions}}', '👎')">👎</span>
                    <span class="close-btn" onclick="closeEmojiPopup('{{this._id}}',event)">✖</span>
                </div>

                <div class="profile_data" >
                    <div class="user-circle">
                        <a style="text-decoration: none;" {{#ifNotEqual this.userName "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.userId}}')"{{/ifNotEqual}}>
                            <img class="user-image profileImageAlternate" src="/user-images/{{this.userId}}.jpg" alt="User Image" draggable="false">
                        </a>
                    </div>
                    <div style="margin-left: 10px;">
                        <a style="text-decoration: none;color:black;" {{#ifNotEqual this.userName "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.userId}}')"{{/ifNotEqual}}>
                            <div class="user-name">{{this.userName}}</div>
                        </a>
                    </div>
                </div>

                {{#if this.edit_status}}
                    <p class="comment_p_actual_rep" style="color: #7d7c7c; font-weight: 600;">( edited )</p>
                {{/if}}
                <div class="messageMentor" id="message-{{this._id}}">
                    <div class="mentor-content" id="mentor-content-{{this._id}}">
                        {{this.questionInput}}
                    </div>
                    <a href="javascript:void(0)" class="show-more" id="show-more-{{this._id}}" onclick="toggleContent('{{this._id}}')">Show More</a>
                </div>

                <div class="reply_del_div">
                    <a class="reply-btn" href="javascript:void(0)" onclick="showReplyForm('{{this._id}}','{{this.questionInput}}')"><i class="fas fa-reply"></i></a>
                </div>

                {{#if this.reactions}}
                    <div class="reaction_div" onclick="view_mess_reactionss('{{this._id}}')">
                        <div class="reaction_thumb"><span class="count_reaction">{{this.reactions.length}}</span> {{getLastReaction this.reactions}}</div>
                    </div>
                {{/if}}
                <section>
                    <div id="view_reactions_{{this._id}}" class="popupform_view_reactions right_color_box" >
                        <p class="close_pop_up_view_reactions" onclick="closePopupViewReactions('{{this._id}}')">&#10006;</p>
                        <div class="Reaction_body_turnedon" style="margin-top: 50px;">
                            {{#each this.reactions}}
                                <div class="reaction_divider">
                                    <div class="user_circle" style="display: flex;">
                                        <a style="text-decoration: none;cursor:pointer;" {{#ifNotEqual this.user_Name "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.user_id}}')"{{/ifNotEqual}}>
                                            <img class="user_image profileImageAlternate" src="/user-images/{{this.user_id}}.jpg" alt="User Image" draggable="false">
                                        </a>
                                    </div>
                                    <a style="text-decoration: none;display: flex;" {{#ifNotEqual this.user_Name "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.user_id}}')"{{/ifNotEqual}}>
                                        <p class="p_in_like_body_turnedon">{{this.user_Name}}</p>
                                    </a>
                                    <p class="p_emoji">{{this.emoji}}</p>
                                </div>
                            {{/each}}
                            <p class="bot_p_1 blackName">press on the emoji once more to remove</p>
                            <p class="bot_p_2 blackName">press on other emoji to modify your reaction</p>
                        </div>
                    </div>
                </section>
            </div>
            
            {{#if this.replies}}
                {{#each this.replies}}
                <div id="{{this._id}}" style="position: relative;">
                    <div class="replycontainer" 
                        onmousedown="startPressTimer('{{this._id}}')" 
                        onmouseup="handlePressRelease()" 
                        onmouseleave="handlePressRelease()" 
                        ontouchstart="startPressTimer('{{this._id}}')" 
                        ontouchend="handlePressRelease()">
                        <div class="option_div" onclick="view_mess_options('{{this._id}}',event)">
                            <i class="fa-solid fa-ellipsis" style="font-size: 22px;"></i>
                            <div class="dropdownND" id="dropdown-{{this._id}}">
                                <ul>
                                    <li onclick="showReplyEmojiPopup('{{this._id}}','{{this.questionId}}',event)">React</li>
                                    {{#compare this.userId "===" ../../userId}}
                                        <li onclick="deleteMentorReply('{{this._id}}','{{this.questionId}}')">delete</li>
                                        {{#ifEqual this.Status "reply"}}
                                            <li onclick="showReplyReplyEditForm('{{this._id}}','{{this.questionId}}','{{this.questionInput}}',null)">edit</li>
                                        {{/ifEqual}}
                                        {{#ifEqual this.Status "replyofreply"}}
                                            <li onclick="showReplyReplyEditForm('{{this._id}}','{{this.questionId}}','{{this.questionInput}}','{{this.replyId}}')">edit</li>
                                        {{/ifEqual}}
                                    {{/compare}}
                                </ul>
                            </div>
                        </div>

                        <div class="emoji-popup right_color_box" id="emoji-popup-{{this._id}}">
                            <span onclick="selectReplyEmoji('{{this._id}}', '{{this.questionId}}', '{{this.reactions.length}}', '{{stringify this.reactions}}', '👍')">👍</span>
                            <span onclick="selectReplyEmoji('{{this._id}}', '{{this.questionId}}', '{{this.reactions.length}}', '{{stringify this.reactions}}', '❤️')">❤️</span>
                            <span onclick="selectReplyEmoji('{{this._id}}', '{{this.questionId}}', '{{this.reactions.length}}', '{{stringify this.reactions}}', '👎')">👎</span>
                            <span class="close-btn" onclick="closeReplyEmojiPopup('{{this._id}}', '{{this.questionId}}',event)">✖</span>
                        </div>
                        
                        <div class="profile_data">
                            <div class="user-circle">
                                <a style="text-decoration: none;" {{#ifNotEqual this.userName "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.userId}}')"{{/ifNotEqual}}>
                                    <img class="user-image profileImageAlternate" src="/user-images/{{this.userId}}.jpg" alt="User Image" draggable="false">
                                </a>
                            </div>
                            <div style="margin-left: 10px;">
                                <a style="text-decoration: none;color:black" {{#ifNotEqual this.userName "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.userId}}')"{{/ifNotEqual}}>
                                    <div class="user-name">{{this.userName}}</div>
                                </a>
                            </div>
                        </div>

                        {{#if this.edit_status}}
                            <p class="comment_p_actual_rep" style="color: #7d7c7c; font-weight: 600;">( edited )</p>
                        {{/if}}

                        {{#ifEqual this.Status "reply"}}
                        <div class="replyMentor" id="message-reply-{{this._id}}">
                            <div class="mentor-content" id="mentor-reply-content-{{this._id}}">
                                {{this.questionInput}}
                            </div>
                            <a href="javascript:void(0)" class="show-more" id="show-more-reply-{{this._id}}" onclick="toggleReplyContent('{{this._id}}')">Show More</a>
                        </div>
                        {{/ifEqual}}

                        {{#ifEqual this.Status "replyofreply"}}
                        <div class="replyMentor" id="message-reply-{{this._id}}">
                            <div onclick="scrollToOriginReply('{{this.replyId}}', '{{this.questionId}}')" class="athead_name">@{{this.replytoUsername}}</div> 
                            <div class="mentor-content" id="mentor-reply-content-{{this._id}}">
                                {{this.questionInput}}
                            </div>
                            <a href="javascript:void(0)" class="show-more" id="show-more-reply-{{this._id}}" onclick="toggleReplyContent('{{this._id}}')">Show More</a>
                        </div>
                        {{/ifEqual}}

                        <div class="reply_del_div">
                            <a class="reply-btn" href="javascript:void(0)" onclick="showReplyReplyForm('{{this._id}}','{{this.userName}}','{{this.questionId}}','{{this.questionInput}}')"><i class="fas fa-reply"></i></a>
                        </div>
                        {{#if this.reactions}}
                            <div class="reaction_div" onclick="view_mess_reactionss('{{this._id}}')">
                                <div class="reaction_thumb"><span class="count_reaction">{{this.reactions.length}}</span> {{getLastReaction this.reactions}}</div>
                            </div>
                        {{/if}}
                        <section>
                            <div id="view_reactions_{{this._id}}" class="popupform_view_reactions right_color_box">
                                <p class="close_pop_up_view_reactions" onclick="closePopupViewReactions('{{this._id}}')">&#10006;</p>
                                <div class="Reaction_body_turnedon" style="margin-top: 50px;">
                                    {{#each this.reactions}}
                                        <div class="reaction_divider">
                                            <div class="user_circle" style="display: flex;">
                                                <a style="text-decoration: none;cursor:pointer;" {{#ifNotEqual this.user_Name "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.user_id}}')"{{/ifNotEqual}}>
                                                    <img class="user_image profileImageAlternate" src="/user-images/{{this.user_id}}.jpg" alt="User Image" draggable="false">
                                                </a>
                                            </div>
                                            <a style="text-decoration: none;display: flex;" {{#ifNotEqual this.user_Name "Admin"}} href="javascript:void(0)" onclick="viewProfile('{{this.user_id}}')"{{/ifNotEqual}}>
                                                <p class="p_in_like_body_turnedon">{{this.user_Name}}</p>
                                            </a>
                                            <p class="p_emoji">{{this.emoji}}</p>
                                        </div>
                                    {{/each}}
                                    <p class="bot_p_1 blackName">press on the emoji once more to remove</p>
                                    <p class="bot_p_2 blackName">press on other emoji to modify your reaction</p>
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
                {{/each}}
            {{/if}}
        </div>
    {{/each}}
    <div id="mentors-container"></div>
</div>
<div class="all_bottom_container darkcolorchanger3">
    <div class="button_container">
        <button class="add_button btn darkcolorchanger2"  onclick="showPopupForm()">Add a question</button>
        <a href="/more-advance-search" class="btn more_search_button darkcolorchanger2">
        Find more specific user
        </a>
    </div>
    <div class="search-container" style=" display: block;margin: 0 auto;margin-bottom:20px;margin-top:20px;">
        <form action="/search_mentor" method="post" enctype="multipart/form-data">
            <input type="text" class="search-bar" name="searchName" oninput="limitCharacters(this,60), validateInput(this)" placeholder="Search for any existing answered questions.">
            <button class="search-icon btn darkcolorchanger2" type="submit"><span style="color: aliceblue;">search</span></button>
        </form >
    </div>
    <p class="p_men_indi">scroll upwards for previously asked mentors</p>
</div>
</div>

<div id="loading-indicator_loader">
    <div class="spinner"></div>
    <p>Loading...</p>
</div>

<div id="popupForm" class="popup-form right_color_box">
    <span class="close" onclick="closePopupForm()">&times;</span>
    <div>
        <label for="questionInput">Add your question</label>
        <textarea id="questionInput" name="questionInput" placeholder="Add your question"  oninput="resizeTextarea(); limitCharacters(this, 2000);"></textarea>
        <br>
        <button class="darkcolorchanger2" onclick="add_question_mentor()">Submit</button>
    </div>
</div>

<div id="replyForm" class="popup-form right_color_box">
    <span class="close" onclick="closeReplyForm()">&times;</span>
    <div>
        <label for="questionInputReply">Add your reply</label>
        <textarea id="questionInputReply" name="questionInputReply" placeholder="Add your reply" oninput="resizeTextarea(); limitCharacters(this, 2000);"></textarea>
        <br>
        <button class="darkcolorchanger2" onclick="add_question_mentor_reply()">Submit</button>
    </div>
</div>

<div id="editQuestionForm" class="popup-form right_color_box">
    <span class="close" onclick="closeQuestionEditForm()">&times;</span>
    <div>
        <label for="questionInput">Edit your Question</label>
        <textarea id="questionInputEdit" name="questionInput" oninput="resizeTextarea(); limitCharacters(this, 2000);"></textarea>
        <br>
        <button class="darkcolorchanger2" onclick="edit_question_mentor()">Submit</button>
    </div>
</div>

<div id="replyReplyForm" class="popup-form right_color_box">
    <span class="close" onclick="closeReplyReplyForm()">&times;</span>
    <div>
        <label>Add your reply</label>
        <textarea id="replyInput" name="replyInput" placeholder="Add your reply" oninput="resizeTextarea(); limitCharacters(this, 2000);"></textarea>
        <br>
        <button class="darkcolorchanger2" onclick="add_question_mentor_reply_reply()">Submit</button>
    </div>
</div>

<div id="replyReplyEditForm" class="popup-form right_color_box">
    <span class="close" onclick="closeReplyReplyEditForm()">&times;</span>
    <div>
        <label for="questionInput">Edit your reply</label>
        <textarea id="replyreplyEditInput" name="replyInput" placeholder="Add your reply"  oninput="resizeTextarea(); limitCharacters(this, 2000);"></textarea>
        <br>
        <button class="darkcolorchanger2" onclick="edit_question_mentor_reply()">Submit</button>
    </div>
</div>

    

<script src="http://localhost:3001/socket.io/socket.io.js"></script>
<script>

    const socket = io('http://localhost:3001');
    const userID = '{{userId}}';
    const userNAME = '{{uber}}';
    sessionStorage.setItem("limiterMentor", '{{limit}}');
    var skip = sessionStorage.getItem('limiterMentor')


    socket.on('deleteMentor', (data) => {
        //console.log("deleteMentor event received at client:", data);
        const deletedMentor = document.getElementById(data);
        if (deletedMentor) {
            deletedMentor.remove();
        }
    });


    socket.on('addMentorEmoji', (data) => {
        //console.log("addMentorEmoji event received at client:", data);
        updateMentorContentInDOM(data);
    });


    socket.on('addMentorReplyEmoji', (data) => {
        //console.log("addMentorReplyEmoji event received at client:", data);
        updateMentorReplyContentInDOM(data);
    });


    socket.on('addMentor', (data) => {
        //console.log("addMentor event received at client:", data);
        addMentor(data);
    });


    socket.on('addMentorReply', (data) => {
        //console.log("addMentorReply event received at client:", data);
        addMentorReply(data);
    });


    socket.on('deleteMentorReply', (data) => {
        //console.log("deleteMentorReply event received at client:", data);
        const mentorElement = document.getElementById(data.mentorId);
        if (mentorElement) { 
            // Find replyElement within mentorElement
            const replyElement = mentorElement.querySelector(`#${CSS.escape(data.replyId)}`);
            if (replyElement) {
                replyElement.remove();
            }
        }
    });


    socket.on('editMentor', (data) => {
        editMentorSocket(data);
    });


    socket.on('editMentorReply', (data) => {
        editMentorReplySocket(data);
    });


    window.onload = function () {
        scrollToBottom();
    };


    function scrollToBottom() {
        document.body.scrollTop = document.body.scrollHeight;
        document.documentElement.scrollTop = document.documentElement.scrollHeight;
    }


    function view_mess_options(mentorID, event) {
        event.stopPropagation(); // Prevents the event from bubbling up
        var dropdown = document.getElementById('dropdown-' + mentorID);
        if (dropdown.style.display === "block") {
            dropdown.style.display = "none";
        } else {
            dropdown.style.display = "block";
        }
    }


    function showEmojiPopup(mentorID, event) {
        event.stopPropagation(); // Prevents the event from bubbling up
        var dropdown = document.getElementById('dropdown-' + mentorID);
        dropdown.style.display = "none";

        var emojiPopup = document.getElementById('emoji-popup-' + mentorID);
        emojiPopup.style.display = "block";
    }


    function showReplyEmojiPopup(replyID, QuestionId, event) {
        event.stopPropagation(); // Prevents the event from bubbling up
        var mainDiv = document.getElementById(QuestionId);

        if (mainDiv) {
            var replyDiv = mainDiv.querySelector('#' + CSS.escape(replyID));

            if (replyDiv) {
                var dropdown = replyDiv.querySelector('.dropdownND');
                if (dropdown) {
                    dropdown.style.display = "none";
                }

                var emojiPopup = replyDiv.querySelector('.emoji-popup');
                if (emojiPopup) {
                    emojiPopup.style.display = "block";
                }
            }
        }
    }


    async function selectEmoji(mentorID, emojiCount, reactionsArray, emoji) {
        try {
            var emojiPopup = document.getElementById('emoji-popup-' + mentorID);
            emojiPopup.style.display = "none";

            emojiPopup.style.display = "none";
            const response = await $.ajax({
                url: '/add_reaction_mentorship',
                method: 'post',
                data: {
                    MeNtOrId: mentorID,
                    EmOjIcOnTeNt: emoji,
                }
            });
            
            if (response.addedMentorReaction) {
                // Fetch the updated message data
                const updatedMentorResponse = await $.ajax({
                    url: '/get_mentor_by_id_emoji',
                    method: 'POST',
                    data: {
                        MeNtOrId: mentorID,
                    }
                });
                if (updatedMentorResponse.mentor) {
                    updatedMentorResponse.mentor.MentorId = mentorID;
                    //console.log("MENTOR VALID : ", updatedMentorResponse.mentor);

                    // Update the message content in the DOM
                    //await updateMentorContentInDOM(updatedMentorResponse.mentor);
                }
                await socket.emit('addMentorEmoji',  
                    updatedMentorResponse.mentor
                );
            }
        } catch (error) {
            console.error('Error in selectEmoji function:', error);
        }
    }


    function updateMentorContentInDOM(updatedMentor) {
        var view_reactions_pop = document.getElementById('view_reactions_' + updatedMentor.MentorId);
        const darkEnabler = localStorage.getItem('darkModeARCCEC') === 'enabled';

        //console.log("UPDATE MENTOR RECEIVED : ",updatedMentor)
        const mentorElement = document.getElementById('mentor_c_o_ntainr_' + updatedMentor.MentorId);
        //console.log("MENTOR ELEMENT : ",mentorElement)
        if (mentorElement) {
            // Update reactions
            let reactionDiv = mentorElement.querySelector('.reaction_div');
            
            if (!reactionDiv) {
                // Create reaction div if it doesn't exist
                reactionDiv = document.createElement('div');
                reactionDiv.className = 'reaction_div';
                reactionDiv.setAttribute('onclick', `view_mess_reactionss('${updatedMentor.MentorId}')`);
                mentorElement.appendChild(reactionDiv);
            }
            
            if (updatedMentor.reactions && updatedMentor.reactions.length > 0) {
                reactionDiv.innerHTML = `<div class="reaction_thumb"><span class="count_reaction">${updatedMentor.reactions.length}</span> ${(updatedMentor.reactions[updatedMentor.reactions.length - 1]).emoji}</div>`;
            } else {
                reactionDiv.innerHTML = '';
            }

            // Handle the reaction popup
            let reactionPopup = document.getElementById('view_reactions_' + updatedMentor.MentorId);
            if (!reactionPopup) {
                // Create the reaction popup if it doesn't exist
                reactionPopup = document.createElement('div');
                reactionPopup.id = 'view_reactions_' + updatedMentor.MentorId;
                reactionPopup.classList.add('popupform_view_reactions','right_color_box');
                if(darkEnabler){ 
                    reactionPopup.style.background = 'linear-gradient(#fff, #606060)';
                }
                reactionPopup.innerHTML = `
                    <p class="close_pop_up_view_reactions" onclick="closePopupViewReactions('${updatedMentor.MentorId}')">&#10006;</p>
                    <div class="Reaction_body_turnedon" style="margin-top: 50px;"></div>
                `;
                mentorElement.appendChild(reactionPopup);
            }

            // Update reaction popup content
            let reactionsHTML = '';
            updatedMentor.reactions.forEach(reaction => {
                reactionsHTML += `
                    <div class="reaction_divider">
                        <div class="user_circle" style="display: flex;">
                            <a style="text-decoration: none;cursor:pointer;" >
                                <img class="user_image profileImageAlternate" src="/user-images/${reaction.user_id}.jpg" alt="User Image" onerror="this.onerror=null;this.src='/user-images/user.png';" draggable="false">
                            </a>
                        </div>
                        <a style="text-decoration: none;display: flex;">
                            <p class="p_in_like_body_turnedon">${reaction.user_Name}</p>
                        </a>
                        <p class="p_emoji">${reaction.emoji}</p>
                    </div>
                `;
            });
            const experienceHeaderColor = darkEnabler ? '#414A4C' : 'black';
            reactionPopup.querySelector('.Reaction_body_turnedon').innerHTML = `
                ${reactionsHTML}
                <p class="bot_p_1 blackName" style="color: ${experienceHeaderColor};">press on the emoji once more to remove</p>
                <p class="bot_p_2 blackName" style="color: ${experienceHeaderColor};">press on other emoji to modify your reaction</p>
            `;

            // Add error handling for user images in the main message content
            const userImages = mentorElement.querySelectorAll('.user-image.profileImageAlternate');
            userImages.forEach(img => {
                img.onerror = function() {
                    this.onerror = null;
                    this.src = '/user-images/user.png';
                };
            });

            document.querySelectorAll('.profileImageAlternate').forEach(function(img) {
                img.addEventListener('contextmenu', function(e) {
                    e.preventDefault();
                });
            });

            // Optionally, prevent dragging
            document.querySelectorAll('.profileImageAlternate').forEach(function(img) {
                img.addEventListener('dragstart', function(e) {
                    e.preventDefault();
                });
            });
        }
    }


    async function selectReplyEmoji(ReplyId, mentorID, emojiCount, reactionsArray, emoji) {
        try {
            var mentorDiv = document.getElementById(mentorID);
            if (mentorDiv) {
            var emojiPopup = mentorDiv.querySelector('#emoji-popup-' + CSS.escape(ReplyId));
                if (emojiPopup) {
                    emojiPopup.style.display = "none";
                }
            }

            const response = await $.ajax({
                url: '/add_reaction_reply_mentorship',
                method: 'post',
                data: {
                    MeNtOrId: mentorID,
                    EmOjIcOnTeNt: emoji,
                    RePlYiD: ReplyId
                }
            });
            
            if (response.addedMentorReplyReaction) {
                // Fetch the updated message data
                const updatedMentorReplyResponse = await $.ajax({
                    url: '/get_mentor_reply_by_id_emoji',
                    method: 'POST',
                    data: {
                        MeNtOrId: mentorID,
                        RePlYiD: ReplyId
                    }
                });
                if (updatedMentorReplyResponse.mentorReply) {
                    updatedMentorReplyResponse.mentorReply.MentorId = mentorID;
                    updatedMentorReplyResponse.mentorReply.ReplyId = ReplyId;
                    //console.log("MENTOR VALID : ", updatedMentorReplyResponse.mentorReply);

                    // Update the message content in the DOM
                    //await updateMentorReplyContentInDOM(updatedMentorReplyResponse.mentorReply);
                
                    await socket.emit('addMentorReplyEmoji',  
                        updatedMentorReplyResponse.mentorReply
                    );

                }
            }
        } catch (error) {
            console.error('Error in selectEmoji function:', error);
        }
    }


    function updateMentorReplyContentInDOM(updatedMentor) {
        const darkEnabler = localStorage.getItem('darkModeARCCEC') === 'enabled';
        const mentorElement = document.getElementById(updatedMentor.MentorId);
        if (mentorElement) {
            // Find replyElement within mentorElement
            const replyElement = mentorElement.querySelector(`#${CSS.escape(updatedMentor.ReplyId)}`);
            if (replyElement) {

                let reactionDiv = replyElement.querySelector('.reaction_div');
                
                if (!reactionDiv) {
                    // Create reaction div if it doesn't exist
                    reactionDiv = document.createElement('div');
                    reactionDiv.className = 'reaction_div';
                    reactionDiv.style.right = "7px"
                    reactionDiv.setAttribute('onclick', `view_mess_reactionss('${updatedMentor.ReplyId}')`);
                    replyElement.appendChild(reactionDiv);
                }
                
                if (updatedMentor.reactions && updatedMentor.reactions.length > 0) {
                    reactionDiv.innerHTML = `<div class="reaction_thumb"><span class="count_reaction">${updatedMentor.reactions.length}</span> ${(updatedMentor.reactions[updatedMentor.reactions.length - 1]).emoji}</div>`;
                } else {
                    reactionDiv.innerHTML = '';
                } 

                let reactionPopup = replyElement.querySelector(`#view_reactions_${updatedMentor.ReplyId}`);
                if (!reactionPopup) {
                    // Create the reaction popup if it doesn't exist
                    reactionPopup = document.createElement('div');
                    reactionPopup.id = `view_reactions_${updatedMentor.ReplyId}`;
                    reactionPopup.classList.add('popupform_view_reactions','right_color_box');
                    if(darkEnabler){ 
                        reactionPopup.style.background = 'linear-gradient(#fff, #606060)';
                    }
                    reactionPopup.innerHTML = `
                        <p class="close_pop_up_view_reactions" onclick="closePopupViewReactions('${updatedMentor.ReplyId}')">&#10006;</p>
                        <div class="Reaction_body_turnedon" style="margin-top: 50px;"></div>
                    `;
                    replyElement.appendChild(reactionPopup);
                }

                // Update reaction popup content
                let reactionsHTML = '';
                updatedMentor.reactions.forEach(reaction => {
                    reactionsHTML += `
                        <div class="reaction_divider">
                            <div class="user_circle" style="display: flex;">
                                <a style="text-decoration: none;cursor:pointer;" >
                                    <img class="user_image profileImageAlternate" src="/user-images/${reaction.user_id}.jpg" alt="User Image" onerror="this.onerror=null;this.src='/user-images/user.png';" draggable="false">
                                </a>
                            </div>
                            <a style="text-decoration: none;display: flex;">
                                <p class="p_in_like_body_turnedon">${reaction.user_Name}</p>
                            </a>
                            <p class="p_emoji">${reaction.emoji}</p>
                        </div>
                    `;
                });
                const experienceHeaderColor = darkEnabler ? '#414A4C' : 'black';
                reactionPopup.querySelector('.Reaction_body_turnedon').innerHTML = `
                    ${reactionsHTML}
                    <p class="bot_p_1 blackName" style="color: ${experienceHeaderColor};">press on the emoji once more to remove</p>
                    <p class="bot_p_2 blackName" style="color: ${experienceHeaderColor};">press on other emoji to modify your reaction</p>
                `;
                
                document.querySelectorAll('.profileImageAlternate').forEach(function(img) {
                    img.addEventListener('contextmenu', function(e) {
                        e.preventDefault();
                    });
                });

                // Optionally, prevent dragging
                document.querySelectorAll('.profileImageAlternate').forEach(function(img) {
                    img.addEventListener('dragstart', function(e) {
                        e.preventDefault();
                    });
                });

            }
        }
    }


    function closeEmojiPopup(mentorId, event) {
        event.stopPropagation(); // Prevents the event from bubbling up
        var emojiPopup = document.getElementById('emoji-popup-' + mentorId);
        emojiPopup.style.display = "none";
    }


    function closeReplyEmojiPopup(replyID, mentorID, event) {
        event.stopPropagation(); // Prevents the event from bubbling up
        var mentorDiv = document.getElementById(mentorID);
        if (mentorDiv) {
           var emojiPopup = mentorDiv.querySelector('#emoji-popup-' + CSS.escape(replyID));
            if (emojiPopup) {
                emojiPopup.style.display = "none";
            }
        }
    }


    async function add_question_mentor(){

        var question = document.getElementById('questionInput');
        question = question.value;
        if (question !== '') {

            var addQuestionPopup = document.getElementById('popupForm');
            document.getElementById('questionInput').value = '';
            addQuestionPopup.style.display = "none";
            var overlay = document.getElementById('add_question_overlay_mentor')
            if (overlay) {
                overlay.remove();
            }
            document.body.style.overflow = "auto";

            question = question.replace(/[\r\n]+/g, " ").replace(/\s+/g, ' ').trim();

            try {
                const response = await $.ajax({
                    url: '/add-question',
                    method: 'post',
                    data: {
                        questionInput : question
                    } 
                });

                if (response.addedMentorQuestion) {
                    // Fetch the updated message data
                    var mentorID = response.insertedQuestionId
                    const updatedMentorResponse = await $.ajax({
                        url: '/get_mentor_by_id_text',
                        method: 'POST',
                        data: {
                            MeNtOrId : mentorID,
                        }
                    });

                    if (updatedMentorResponse.mentor.has_mentor) {
                        //console.log("MESSAGE VALID : ", updatedMentorResponse.message);
                        
                        // TO DISPLAY MESSAGE USING WEBSOCKET AFTER SUCCESSFULL EXECUTION OF DATABASE MENTOR INSERTION
                        await socket.emit('addMentor', { userId: userID, Name: userNAME, mentorID, question});
                        await scrollToBottom()
                    }
                }
            } catch (error) {
                console.error('Error sending mentor:', error);
            }
        }
    }


    async function add_question_mentor_reply(){
        var question = document.getElementById('questionInputReply');
        question = question.value;
        var hiddenMentorId = sessionStorage.getItem("mentor_i_d_to_reply");
        if (question !== '') {

            var addQuestionReplyPopup = document.getElementById('replyForm');
            document.getElementById('questionInputReply').value = '';
            var overlay = document.getElementById('add_question_reply_overlay_mentor')
            if (overlay) {
                overlay.remove();
            }
            document.body.style.overflow = "auto";
            addQuestionReplyPopup.style.display = "none";

            question = question.replace(/[\r\n]+/g, " ").replace(/\s+/g, ' ').trim();

            try {
                const response = await $.ajax({
                    url: '/add-reply',
                    method: 'post',
                    data: {
                        questionInput : question,
                        questionId : hiddenMentorId
                    }
                });

                if (response.addedMentorReply) {
                    // Fetch the updated message data
                    sessionStorage.setItem("mentor_i_d_to_reply", null);
                    var replyID = response.insertedReplyId;
                    var mentorID = hiddenMentorId;
                    const updatedMentorReplyResponse = await $.ajax({
                        url: '/get_mentor_reply_by_id_text',
                        method: 'POST',
                        data: {
                            MeNtOrId : mentorID,
                            RePlYiD: replyID

                        }
                    });

                    if (updatedMentorReplyResponse.mentorReply.has_mentorReply) {
                        //console.log("MESSAGE VALID : ", updatedMentorReplyResponse.mentorReply);
                        
                        // TO DISPLAY MESSAGE USING WEBSOCKET AFTER SUCCESSFULL EXECUTION OF DATABASE MENTOR INSERTION
                        await socket.emit('addMentorReply', { userId: userID, Name: userNAME, mentorID: hiddenMentorId, replyID, question,status: "reply"});
                        //await scrollToBottom()
                    }
                }
            } catch (error) {
                console.error('Error sending mentor reply :', error);
            }
        }
    }


    async function add_question_mentor_reply_reply(){
        var replyreply = document.getElementById('replyInput');
        replyreply = replyreply.value;

        var replyId = sessionStorage.getItem("mentor_i_d_to_reply_reply");
        var replytoUsername = sessionStorage.getItem("mentor_i_d_to_reply_user");
        var questionId = sessionStorage.getItem("mentor_i_d_to_reply_mentor");

        if (replyreply !== '') {

            var addQuestionReplyPopup = document.getElementById('replyReplyForm');
            document.getElementById('replyInput').value = '';
            var overlay = document.getElementById('add_question_reply_reply_overlay_mentor')
            if (overlay) {
                overlay.remove();
            }
            document.body.style.overflow = "auto";
            addQuestionReplyPopup.style.display = "none";

            replyreply = replyreply.replace(/[\r\n]+/g, " ").replace(/\s+/g, ' ').trim();

            try {
                const response = await $.ajax({
                    url: '/add-reply-ofreply',
                    method: 'post',
                    data: {
                        replyId,
                        replytoUsername,
                        questionId,
                        replyInput : replyreply,
                    }
                });

                if (response.addedMentorReplyReply) {
                    // Fetch the updated message data
                    sessionStorage.setItem("mentor_i_d_to_reply_reply", null);
                    sessionStorage.setItem("mentor_i_d_to_reply_user", null);
                    sessionStorage.setItem("mentor_i_d_to_reply_mentor", null);
                    var replyID = response.insertedReplyReplyId;
                    var mentorID = questionId;

                    const updatedMentorReplyResponse = await $.ajax({
                        url: '/get_mentor_reply_by_id_text',
                        method: 'POST',
                        data: {
                            MeNtOrId : mentorID,
                            RePlYiD: replyID

                        }
                    });

                    if (updatedMentorReplyResponse.mentorReply.has_mentorReply) {
                        //console.log("MESSAGE VALID : ", updatedMentorReplyResponse.mentorReply);
                        
                        // TO DISPLAY MESSAGE USING WEBSOCKET AFTER SUCCESSFULL EXECUTION OF DATABASE MENTOR INSERTION
                        await socket.emit('addMentorReply', { userId: userID, Name: userNAME, mentorID: questionId, replyID, redirect_id: replyId, question: replyreply, status: "replyofreply", OriginUserName: replytoUsername});
                        //await scrollToBottom()
                    }
                }
            } catch (error) {
                console.error('Error sending mentor reply :', error);
            }
        }
    }


    async function edit_question_mentor(){
        if (confirm("Do you want to edit question ?")) {
            var question = document.getElementById('questionInputEdit');
            question = question.value;
            var hiddenQuestionId = sessionStorage.getItem("mentor_i_d_to_edit_q");
            if (question !== '') {

                var addQuestionEditPopup = document.getElementById('editQuestionForm');
                addQuestionEditPopup.style.display = "none";
                document.getElementById('questionInputEdit').value = '';
                var overlay = document.getElementById('edit_question_overlay_mentor')
                if (overlay) {
                    overlay.remove();
                }
                document.body.style.overflow = "auto";
                addQuestionEditPopup.style.display = "none";

                question = question.replace(/[\r\n]+/g, " ").replace(/\s+/g, ' ').trim();

                try {
                    const response = await $.ajax({
                        url: '/edit-question',
                        method: 'post',
                        data: {
                            questionInput : question,
                            questionId : hiddenQuestionId
                        }
                    });

                    if (response.success) {
                        // Fetch the updated message data           
                        await socket.emit('editMentor', {mentorID: hiddenQuestionId, editInput: question});
                        await sessionStorage.setItem("mentor_i_d_to_edit_q", null);             
                    }
                } catch (error) {
                    console.error('Error editing mentor question : ', error);
                }
            }
        }
    }


    async function edit_question_mentor_reply(){
        if (confirm("Do you want to edit this reply ?")) {
            var question = document.getElementById('replyreplyEditInput');
            question = question.value;
            var hiddenMentorId = sessionStorage.getItem("mentor_i_d_to_reply_reply_ment");
            var hiddenMentorReplyId = sessionStorage.getItem("mentor_i_d_to_reply_reply");
            var hiddenActualRedirect = sessionStorage.getItem("mentor_i_d_to_redirect_reply_reply");
            if (question !== '') {

                var addQuestionReplyPopup = document.getElementById('replyReplyEditForm');
                document.getElementById('replyreplyEditInput').value = '';
                var overlay = document.getElementById('edit_question_reply_overlay_mentor')
                if (overlay) {
                    overlay.remove();
                }
                document.body.style.overflow = "auto";
                addQuestionReplyPopup.style.display = "none";

                question = question.replace(/[\r\n]+/g, " ").replace(/\s+/g, ' ').trim();

                try {
                    const response = await $.ajax({
                        url: '/edit-reply',
                        method: 'post',
                        data: {
                            replyInput : question,
                            questionId : hiddenMentorId,
                            replyId : hiddenMentorReplyId
                        }
                    });

                    if (response.success) {
                        await socket.emit('editMentorReply', {mentorID: hiddenMentorId, replyID: hiddenMentorReplyId, editReplyInput: question,actualRedirectId: hiddenActualRedirect});
                        await sessionStorage.setItem("mentor_i_d_to_reply_reply_ment", null);
                        await sessionStorage.setItem("mentor_i_d_to_reply_reply", null);
                        await sessionStorage.setItem("mentor_i_d_to_redirect_reply_reply", null);
                    }
                } catch (error) {
                    console.error('Error editing mentor reply :', error);
                }
            }
        }
    }


    function scrollToOriginReply(replyId, mentorId){
        const mentorElement = document.getElementById(mentorId);
        if (mentorElement) {
            const replyElement = mentorElement.querySelector(`#${CSS.escape(replyId)}`);
            if (replyElement) {
                // Get the top position of the replyElement relative to the viewport
                const rect = replyElement.getBoundingClientRect();
                const offsetTop = window.pageYOffset + rect.top - 200; // Adjust 200px for the header

                // Smooth scroll to the adjusted position
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });

                // Add highlight effect
                replyElement.classList.add('highlight');
                setTimeout(() => {
                    replyElement.classList.remove('highlight');
                }, 2000);
            }
        }
    }


    function showPopupForm() {
        var popupForm = document.getElementById("popupForm");
        var questionBox = document.getElementById("questionInput");
        var overlay = document.createElement('div');
        overlay.id = 'add_question_overlay_mentor';
        overlay.className = 'popup_overlay';
        document.body.appendChild(overlay); 
        overlay.addEventListener('click', function(event) {
            event.stopPropagation();
        });
        document.body.style.overflow = "hidden";
        popupForm.style.display = "block";
        questionBox.focus() 
        //scrollToBottom(); 
    }


    function closePopupForm() {
        var popupForm = document.getElementById("popupForm");
        popupForm.style.display = "none";
        var overlay = document.getElementById('add_question_overlay_mentor')
        if (overlay) {
            overlay.remove();
        }
        document.body.style.overflow = "auto";
    }


    function showReplyForm(mentorId, QuestionInput) {
        var replyForm = document.getElementById("replyForm");
        sessionStorage.setItem("mentor_i_d_to_reply", mentorId);
        var questionInputReplybox = document.getElementById("questionInputReply");
        var overlay = document.createElement('div');
        overlay.id = 'add_question_reply_overlay_mentor';
        overlay.className = 'popup_overlay';
        document.body.appendChild(overlay); 
        overlay.addEventListener('click', function(event) {
            event.stopPropagation();
        });
        document.body.style.overflow = "hidden";
        replyForm.style.display = "block";
        updatePlaceholder(QuestionInput);
        
        // Add a slight delay before focusing the text area
        setTimeout(function() {
            questionInputReplybox.focus();
        }, 100); // 100 milliseconds delay
    }


    function updatePlaceholder(QuestionInput) {
        var questionInputReplybox = document.getElementById("questionInputReply");
        var firstLine = QuestionInput.split('\n')[0]; // Split the input by newline and take the first element
        var maxLength = 50; // Set a maximum length for the placeholder text
        if (firstLine.length > maxLength) {
            firstLine = firstLine.substring(0, maxLength) + "..."; // Truncate and add ellipsis if it's too long
        }
        questionInputReplybox.placeholder = "Reply to: " + firstLine;
    }


    function closeReplyForm() {
        var replyForm = document.getElementById("replyForm");
        replyForm.style.display = "none";
        var overlay = document.getElementById('add_question_reply_overlay_mentor')
        if (overlay) {
            overlay.remove();
        }
        document.body.style.overflow = "auto";
    }


    function showQuestionEditForm(mentorId,questionInput) {
        sessionStorage.setItem("mentor_i_d_to_edit_q",mentorId);
        var editQuestionForm = document.getElementById("editQuestionForm");
        var questionInputTextarea = document.getElementById("questionInputEdit");
        var overlay = document.createElement('div');
        overlay.id = 'edit_question_overlay_mentor';
        overlay.className = 'popup_overlay';
        document.body.appendChild(overlay); 
        overlay.addEventListener('click', function(event) {
            event.stopPropagation();
        });
        document.body.style.overflow = "hidden";
        questionInputTextarea.value = questionInput; 
        editQuestionForm.style.display = "block";
    }


    function closeQuestionEditForm() {
        var editQuestionForm = document.getElementById("editQuestionForm");
        editQuestionForm.style.display = "none";
        var overlay = document.getElementById('edit_question_overlay_mentor')
        if (overlay) {
            overlay.remove();
        }
        document.body.style.overflow = "auto";
    }


    function showReplyReplyForm(replyId,userName,questionId,QuestionInput) {
        var replyReplyForm = document.getElementById("replyReplyForm");
        var replyInputTextarea = document.getElementById("replyInput");

        sessionStorage.setItem("mentor_i_d_to_reply_reply",replyId);
        sessionStorage.setItem("mentor_i_d_to_reply_user",userName);
        sessionStorage.setItem("mentor_i_d_to_reply_mentor",questionId);
        updateReplyPlaceholder(QuestionInput);
        var overlay = document.createElement('div');
        overlay.id = 'add_question_reply_reply_overlay_mentor';
        overlay.className = 'popup_overlay';
        document.body.appendChild(overlay); 
        overlay.addEventListener('click', function(event) {
            event.stopPropagation();
        });
        document.body.style.overflow = "hidden";
        
        setTimeout(function() {
            replyInputTextarea.focus();
        }, 100);
        replyReplyForm.style.display = "block";
    }


    function updateReplyPlaceholder(QuestionInput) {
        var questionInputReplybox = document.getElementById("replyInput");
        var firstLine = QuestionInput.split('\n')[0]; // Split the input by newline and take the first element
        var maxLength = 50; // Set a maximum length for the placeholder text
        if (firstLine.length > maxLength) {
            firstLine = firstLine.substring(0, maxLength) + "..."; // Truncate and add ellipsis if it's too long
        }
        questionInputReplybox.placeholder = "Reply to: " + firstLine;
    }


    function closeReplyReplyForm() {
        var replyReplyForm = document.getElementById("replyReplyForm");
        replyReplyForm.style.display = "none";
        var overlay = document.getElementById('add_question_reply_reply_overlay_mentor')
        if (overlay) {
            overlay.remove();
        }
        document.body.style.overflow = "auto";
    }


    function showReplyReplyEditForm(replyId,questionId,userInput,actualRedirectReply) {

        sessionStorage.setItem("mentor_i_d_to_reply_reply",replyId);
        sessionStorage.setItem("mentor_i_d_to_reply_reply_ment",questionId);
        sessionStorage.setItem("mentor_i_d_to_redirect_reply_reply",actualRedirectReply);

        var replyReplyEditForm = document.getElementById("replyReplyEditForm");
        var replyInputEditTextarea = document.getElementById("replyreplyEditInput")
        replyInputEditTextarea.value = userInput;
        replyReplyEditForm.style.display = "block";
        var overlay = document.createElement('div');
        overlay.id = 'edit_question_reply_overlay_mentor';
        overlay.className = 'popup_overlay';
        document.body.appendChild(overlay); 
        overlay.addEventListener('click', function(event) {
            event.stopPropagation();
        });
        document.body.style.overflow = "hidden";
        questionInputTextarea.value = questionInput;
    }


    function closeReplyReplyEditForm() {
        var replyReplyEditForm = document.getElementById("replyReplyEditForm");
        replyReplyEditForm.style.display = "none";
        var overlay = document.getElementById('edit_question_reply_overlay_mentor')
        if (overlay) {
            overlay.remove();
        }
        document.body.style.overflow = "auto";
    }


    function resizeTextarea() {
        var textarea = document.getElementById("questionInput");
        var textareaReply = document.getElementById("questionInputReply");
        var textareaReplyReply = document.getElementById("replyInput");
        var replyEdit = document.getElementById('questionInputEdit');
        var replyreplyEdit = document.getElementById('replyreplyEditInput');
        textarea.style.height = "auto";
        textarea.style.height = (textarea.scrollHeight) + "px";
        textareaReply.style.height = "auto";
        textareaReply.style.height = (textareaReply.scrollHeight) + "px";
        textareaReplyReply.style.height = "auto";
        textareaReplyReply.style.height = (textareaReplyReply.scrollHeight) + "px";
        replyEdit.style.height = "auto";
        replyEdit.style.height = (replyEdit.scrollHeight) + "px";
        replyreplyEdit.style.height = "auto";
        replyreplyEdit.style.height = (replyreplyEdit.scrollHeight) + "px";
    }
    

    function deleteMentor(mentorId) {
        //console.log("DELETE MENTOR CALLED")
        if (confirm("Do you want to delete this question from portal?")) {
            $.ajax({
            url: '/delete-mentor',
            method: 'post',
            data: {
                MentoR: mentorId,
            },
            success: function (response) {
                if (response.deleteMentor) {
                    socket.emit('deleteMentor', mentorId);
                }
            },
            });
        }
    }


    function deleteMentorReply(replyId,questionId) {
        //console.log("DELETE MENTOR REPLY CALLED")
        if (confirm("Do you want to delete this response from portal?")) {
            $.ajax({
            url: '/delete-mentor-reply',
            method: 'post',
            data: {
                MentorreplY: replyId,
                QuestioN:questionId
            },
            success: function (response) {
                if (response.deleteMentorReply) {
                    socket.emit('deleteMentorReply',{replyId, mentorId: questionId})
                }
            },
            });
        }
    }


    function showEmojiwithouteventPopup(mentorId) {
        var dropdown = document.getElementById('dropdown-' + mentorId);
        dropdown.style.display = "none";

        var emojiPopup = document.getElementById('emoji-popup-' + mentorId);
        emojiPopup.style.display = "block";
    }


    function view_mess_reactionss(mentorID) {
        var view_reactions_pop = document.getElementById('view_reactions_' + mentorID);
        var overlay = document.createElement('div');
        overlay.id = 'view_mentor_reactions_overlay';
        overlay.className = 'popup_overlay';
        document.body.appendChild(overlay); 
        view_reactions_pop.style.display = 'block';
        document.body.style.overflow = "hidden";
        overlay.addEventListener('click', function(event) {
            event.stopPropagation();
        });
    }


    function closePopupViewReactions(mentorID){
        var view_reactions_pop = document.getElementById('view_reactions_' + mentorID);
        view_reactions_pop.style.display = 'none';
        document.body.style.overflow = "auto";
        var overlay = document.getElementById('view_mentor_reactions_overlay')
        if (overlay) {
            overlay.remove();
        }
    }


    function sendTimestampOnUnload() {
        const timestamp = new Date().toISOString();

        // Use navigator.sendBeacon for asynchronous data transmission during unload
        const url = '/send_timestamp_leave_mentorportal';
        const body = JSON.stringify({ timestamp });
        const blob = new Blob([body], { type: 'application/json' });

        navigator.sendBeacon(url, blob);
        //window.location.reload();
    }
    window.addEventListener('beforeunload', sendTimestampOnUnload);


    let pressTimer;
    let longPressActivated = false;
    let currentDivId = null;


    function startPressTimer(divId) {
        currentDivId = divId;
        pressTimer = setTimeout(() => handleLongPress(divId), 700); // 1000ms for a 1-second long press
    }


    function handlePressRelease() {
        clearTimeout(pressTimer);
        if (!longPressActivated) {
            currentDivId = null;
        }
    }


    function handleLongPress(divId) {
        longPressActivated = true;
        //console.log(`Long press detected on div with id: ${divId}`);
        // Perform any action required for long press
        showEmojiwithouteventPopup(divId)
    }


    // Add an event listener for clicks anywhere on the document
    document.addEventListener('click', (event) => {
        if (longPressActivated && event.target.id !== currentDivId) {
            longPressActivated = false;
            currentDivId = null;
            //console.log('Long press deactivated');
            // Perform any cleanup or action required when long press is deactivated
        }
    }, true);


    // Prevent scrolling during touch to prevent unintended behavior
    /*document.addEventListener('touchmove', (event) => {
        if (longPressActivated) {
            event.preventDefault();
        }
    }, { passive: false });*/


    function addMentor(data) {
        // Create the main mentor container
        let mentorDiv = document.createElement('div');
        mentorDiv.id = data.mentorID;
        mentorDiv.style.position = 'relative';

        const  darkEnabler = localStorage.getItem('darkModeARCCEC') === 'enabled';

        // Create the inner mentor container with event handlers
        let mentorContainer = document.createElement('div');
        mentorContainer.className = 'mentorcontainer';
        mentorContainer.id = `mentor_c_o_ntainr_${data.mentorID}`
        mentorContainer.setAttribute('onmousedown', `startPressTimer('${data.mentorID}')`);
        mentorContainer.setAttribute('onmouseup', 'handlePressRelease()');
        mentorContainer.setAttribute('onmouseleave', 'handlePressRelease()');
        mentorContainer.setAttribute('ontouchstart', `startPressTimer('${data.mentorID}')`);
        mentorContainer.setAttribute('ontouchend', 'handlePressRelease()');

        // Option div
        let optionDiv = document.createElement('div');
        optionDiv.className = 'option_div';
        optionDiv.setAttribute('onclick', `view_mess_options('${data.mentorID}', event)`);

        let icon = document.createElement('i');
        icon.className = 'fa-solid fa-ellipsis';
        icon.style.fontSize = '22px';
        optionDiv.appendChild(icon);

        // Dropdown menu
        let dropdown = document.createElement('div');
        dropdown.className = 'dropdownND';
        dropdown.id = `dropdown-${data.mentorID}`;
        let ul = document.createElement('ul');
        let liReact = document.createElement('li');
        liReact.setAttribute('onclick', `showEmojiPopup('${data.mentorID}', event)`);
        liReact.innerText = 'React';
        ul.appendChild(liReact);

        if (data.userId == userID) {
            let liDelete = document.createElement('li');
            liDelete.setAttribute('onclick', `deleteMentor('${data.mentorID}')`);
            liDelete.innerText = 'delete';
            ul.appendChild(liDelete);

            let liEdit = document.createElement('li');
            liEdit.setAttribute('onclick', `showQuestionEditForm('${data.mentorID}', '${data.question}')`);
            liEdit.innerText = 'edit';
            ul.appendChild(liEdit);
        }

        dropdown.appendChild(ul);
        optionDiv.appendChild(dropdown);
        mentorContainer.appendChild(optionDiv);

        // Emoji popup
        let emojiPopup = document.createElement('div');
        emojiPopup.classList.add('emoji-popup','right_color_box');
        if(darkEnabler){
            emojiPopup.style.background = 'linear-gradient(#fff, #606060)';
        }
        emojiPopup.id = `emoji-popup-${data.mentorID}`;

        ['👍', '❤️', '👎'].forEach(emoji => {
            let span = document.createElement('span');
            span.setAttribute('onclick', `selectEmoji('${data.mentorID}', '${data.reactionCount}', '${JSON.stringify(data.reactions)}', '${emoji}')`);
            span.innerText = emoji;
            emojiPopup.appendChild(span);
        });

        let closeBtn = document.createElement('span');
        closeBtn.className = 'close-btn';
        closeBtn.setAttribute('onclick', `closeEmojiPopup('${data.mentorID}', event)`);
        closeBtn.innerText = '✖';
        emojiPopup.appendChild(closeBtn);
        mentorContainer.appendChild(emojiPopup);

        // Profile data
        let profileData = document.createElement('div');
        profileData.className = 'profile_data';

        let userCircle = document.createElement('div');
        userCircle.className = 'user-circle';
        let profileLink = document.createElement('a');
        profileLink.style.textDecoration = 'none';
        /*if(data.Name != 'Admin'){
            profileLink.setAttribute('onclick', `viewProfile('${data.userId}')`);
        }*/
        let profileImg = document.createElement('img');
        profileImg.className = 'user-image profileImageAlternate';
        profileImg.src = `/user-images/${data.userId}.jpg`;
        profileImg.alt = 'User Image';
        profileImg.draggable = false;

        profileImg.addEventListener('contextmenu', function(e) {
            e.preventDefault();
        });

        // Prevent dragging
        profileImg.addEventListener('dragstart', function(e) {
            e.preventDefault();
        });

        // Profile image fallback handling
        fetch(profileImg.src)
            .then(response => {
                if (!response.ok) {
                    profileImg.src = "/user-images/user.png";
                }
            })
            .catch(error => {
                console.error("Error fetching image:", error);
                profileImg.src = "/user-images/user.png";
            });

        profileLink.appendChild(profileImg);
        userCircle.appendChild(profileLink);
        profileData.appendChild(userCircle);

        let userInfo = document.createElement('div');
        userInfo.style.marginLeft = '10px';
        let userNameLink = document.createElement('a');
        userNameLink.style.textDecoration = 'none';
        userNameLink.style.color = 'black';
        /*if(data.Name != 'Admin'){
            userNameLink.setAttribute('onclick', `viewProfile('${data.userId}')`);
        }*/
        let userNameDiv = document.createElement('div');
        userNameDiv.className = 'user-name';
        userNameDiv.innerText = data.Name;
        userNameLink.appendChild(userNameDiv);
        userInfo.appendChild(userNameLink);
        profileData.appendChild(userInfo);
        mentorContainer.appendChild(profileData);

        // Mentor message with "Show More" functionality
        let messageMentor = document.createElement('div');
        messageMentor.className = 'messageMentor';
        messageMentor.id = `message-${data.mentorID}`;

        // Create the content div
        let contentDiv = document.createElement('div');
        contentDiv.className = 'mentor-content';
        contentDiv.id = `mentor-content-${data.mentorID}`;
        contentDiv.innerText = data.question;
        
        // Create the "Show More" link
        let showMoreLink = document.createElement('a');
        showMoreLink.href = 'javascript:void(0)';
        showMoreLink.className = 'show-more';
        showMoreLink.id = `show-more-${data.mentorID}`;
        showMoreLink.innerText = 'Show More';
        showMoreLink.setAttribute('onclick', `toggleContent('${data.mentorID}')`);

        // Append content and "Show More" link to the message div
        messageMentor.appendChild(contentDiv);
        messageMentor.appendChild(showMoreLink);
        mentorContainer.appendChild(messageMentor);

        // Reply button
        let replyDelDiv = document.createElement('div');
        replyDelDiv.className = 'reply_del_div';
        let replyBtn = document.createElement('a');
        replyBtn.className = 'reply-btn';
        replyBtn.href = 'javascript:void(0)';
        replyBtn.setAttribute('onclick', `showReplyForm('${data.mentorID}','${data.question}')`);
        let replyIcon = document.createElement('i');
        replyIcon.className = 'fas fa-reply';
        replyBtn.appendChild(replyIcon);
        replyDelDiv.appendChild(replyBtn);
        mentorContainer.appendChild(replyDelDiv);

        // Reaction view
        /*if (data.hasReactions) {
            let reactionDiv = document.createElement('div');
            reactionDiv.className = 'reaction_div';
            reactionDiv.setAttribute('onclick', `view_mess_reactionss('${data.mentorID}')`);
            let reactionThumb = document.createElement('div');
            reactionThumb.className = 'reaction_thumb';
            reactionThumb.innerHTML = `<span class="count_reaction">${data.reactionCount}</span> ${data.reactionThumbnail}`;
            reactionDiv.appendChild(reactionThumb);
            mentorContainer.appendChild(reactionDiv);
        }*/

        // Append all to the main mentor div
        mentorDiv.appendChild(mentorContainer);

        // Append the mentorDiv to the desired parent element
        document.getElementById('mentors-container').appendChild(mentorDiv);
        checkContentOverflow(data.mentorID)
    }


    function addMentorReply(data) {
        // Find the mentor's container by ID
        let mentorDiv = document.getElementById(data.mentorID);

        const  darkEnabler = localStorage.getItem('darkModeARCCEC') === 'enabled';

        // Check if mentorDiv exists
        if (!mentorDiv) {
            console.error(`Mentor container with ID ${data.mentorID} not found.`);
            return;
        }

        // Create the main reply container
        let replyDiv = document.createElement('div');
        replyDiv.id = data.replyID;
        replyDiv.style.position = 'relative';

        // Create the inner reply container with event handlers
        let replyContainer = document.createElement('div');
        replyContainer.className = 'replycontainer';
        replyContainer.setAttribute('onmousedown', `startPressTimer('${data.replyID}')`);
        replyContainer.setAttribute('onmouseup', 'handlePressRelease()');
        replyContainer.setAttribute('onmouseleave', 'handlePressRelease()');
        replyContainer.setAttribute('ontouchstart', `startPressTimer('${data.replyID}')`);
        replyContainer.setAttribute('ontouchend', 'handlePressRelease()');

        // Option div
        let optionDiv = document.createElement('div');
        optionDiv.className = 'option_div';
        optionDiv.setAttribute('onclick', `view_mess_options('${data.replyID}', event)`);

        let icon = document.createElement('i');
        icon.className = 'fa-solid fa-ellipsis';
        icon.style.fontSize = '22px';
        optionDiv.appendChild(icon);

        // Dropdown menu
        let dropdown = document.createElement('div');
        dropdown.className = 'dropdownND';
        dropdown.id = `dropdown-${data.replyID}`;
        let ul = document.createElement('ul');
        let liReact = document.createElement('li');
        liReact.setAttribute('onclick', `showReplyEmojiPopup('${data.replyID}', '${data.mentorID}', event)`);
        liReact.innerText = 'React';
        ul.appendChild(liReact);

        if (data.userId == userID) {
            let liDelete = document.createElement('li');
            liDelete.setAttribute('onclick', `deleteMentorReply('${data.replyID}', '${data.mentorID}')`);
            liDelete.innerText = 'delete';
            ul.appendChild(liDelete);

            let liEdit = document.createElement('li');
            liEdit.setAttribute('onclick', `showReplyReplyEditForm('${data.replyID}', '${data.mentorID}', '${data.question}')`);
            liEdit.innerText = 'edit';
            ul.appendChild(liEdit);
        }

        dropdown.appendChild(ul);
        optionDiv.appendChild(dropdown);
        replyContainer.appendChild(optionDiv);

        // Emoji popup
        let emojiPopup = document.createElement('div');
        emojiPopup.classList.add('emoji-popup','right_color_box');
        if(darkEnabler){
            emojiPopup.style.background = 'linear-gradient(#fff, #606060)';
        }
        emojiPopup.id = `emoji-popup-${data.replyID}`;

        ['👍', '❤️', '👎'].forEach(emoji => {
            let span = document.createElement('span');
            span.setAttribute('onclick', `selectReplyEmoji('${data.replyID}', '${data.mentorID}', '${data.reactionCount}', '${JSON.stringify(data.reactions)}', '${emoji}')`);
            span.innerText = emoji;
            emojiPopup.appendChild(span);
        });

        let closeBtn = document.createElement('span');
        closeBtn.className = 'close-btn';
        closeBtn.setAttribute('onclick', `closeReplyEmojiPopup('${data.replyID}', '${data.mentorID}', event)`);
        closeBtn.innerText = '✖';
        emojiPopup.appendChild(closeBtn);
        replyContainer.appendChild(emojiPopup);

        // Profile data
        let profileData = document.createElement('div');
        profileData.className = 'profile_data';

        let userCircle = document.createElement('div');
        userCircle.className = 'user-circle';
        let profileLink = document.createElement('a');
        profileLink.style.textDecoration = 'none';
        /*if(data.Name != 'Admin'){
            profileLink.setAttribute('onclick', `viewProfile('${data.userId}')`);
        }*/
        let profileImg = document.createElement('img');
        profileImg.className = 'user-image profileImageAlternate';
        profileImg.src = `/user-images/${data.userId}.jpg`;
        profileImg.alt = 'User Image';
        profileImg.draggable = false;

        profileImg.addEventListener('contextmenu', function(e) {
            e.preventDefault();
        });

        // Prevent dragging
        profileImg.addEventListener('dragstart', function(e) {
            e.preventDefault();
        });

        // Profile image fallback handling
        fetch(profileImg.src)
            .then(response => {
                if (!response.ok) {
                    profileImg.src = "/user-images/user.png";
                }
            })
            .catch(error => {
                console.error("Error fetching image:", error);
                profileImg.src = "/user-images/user.png";
            });

        profileLink.appendChild(profileImg);
        userCircle.appendChild(profileLink);
        profileData.appendChild(userCircle);

        let userInfo = document.createElement('div');
        userInfo.style.marginLeft = '10px';
        let userNameLink = document.createElement('a');
        userNameLink.style.textDecoration = 'none';
        userNameLink.style.color = 'black';
        /*if(data.Name != 'Admin'){
            userNameLink.setAttribute('onclick', `viewProfile('${data.userId}')`);
        }*/
        let userNameDiv = document.createElement('div');
        userNameDiv.className = 'user-name';
        userNameDiv.innerText = data.Name;
        userNameLink.appendChild(userNameDiv);
        userInfo.appendChild(userNameLink);
        profileData.appendChild(userInfo);
        replyContainer.appendChild(profileData);


        let replyMentor = document.createElement('div');
        replyMentor.className = 'replyMentor';
        replyMentor.id = `message-reply-${data.replyID}`;
        
        if (data.status === "replyofreply") {
            let redirectReply = document.createElement('div');
            redirectReply.innerText = '@' + data.OriginUserName;
            redirectReply.setAttribute('onclick', `scrollToOriginReply('${data.redirect_id}', '${data.mentorID}')`);
            redirectReply.className = 'athead_name';
            replyMentor.appendChild(redirectReply);
        }

        let mentorContent = document.createElement('div');
        mentorContent.className = 'mentor-content';
        mentorContent.id = `mentor-reply-content-${data.replyID}`;
        mentorContent.innerText = data.question;
        replyMentor.appendChild(mentorContent);

        // Add "Show More" link
        let showMoreLink = document.createElement('a');
        showMoreLink.href = 'javascript:void(0)';
        showMoreLink.className = 'show-more';
        showMoreLink.id = `show-more-reply-${data.replyID}`;
        showMoreLink.setAttribute('onclick', `toggleReplyContent('${data.replyID}')`);
        showMoreLink.innerText = 'Show More';
        replyMentor.appendChild(showMoreLink);

        replyContainer.appendChild(replyMentor);


        let replyDelDiv = document.createElement('div');
        replyDelDiv.className = 'reply_del_div';
        let replyBtn = document.createElement('a');
        replyBtn.className = 'reply-btn';
        replyBtn.href = 'javascript:void(0)';
        replyBtn.setAttribute('onclick', `showReplyReplyForm('${data.replyID}', '${data.Name}', '${data.mentorID}', '${data.question}')`);
        let replyIcon = document.createElement('i');
        replyIcon.className = 'fas fa-reply';
        replyBtn.appendChild(replyIcon);
        replyDelDiv.appendChild(replyBtn);
        replyContainer.appendChild(replyDelDiv);

        // Reaction view
        /*if (data.hasReactions) {
            let reactionDiv = document.createElement('div');
            reactionDiv.className = 'reaction_div';
            reactionDiv.setAttribute('onclick', `view_mess_reactionss('${data.replyID}')`);
            let reactionThumb = document.createElement('div');
            reactionThumb.className = 'reaction_thumb';
            reactionThumb.innerHTML = `<span class="count_reaction">${data.reactionCount}</span> ${data.reactionThumbnail}`;
            reactionDiv.appendChild(reactionThumb);
            replyContainer.appendChild(reactionDiv);
        }*/

        // Append all to the main reply div
        replyDiv.appendChild(replyContainer);

        // Append the replyDiv to the mentorDiv
        mentorDiv.appendChild(replyDiv);
        checkReplyContentOverflow(data.replyID)
    }


    function editMentorSocket(data) {
        const { editInput, mentorID } = data;

        // Find the mentor container by ID
        const mentorElement = document.getElementById(mentorID);

        if (mentorElement) {
            // Update the question input
            const questionInputElement = mentorElement.querySelector('.mentor-content');
            if (questionInputElement) {
                questionInputElement.textContent = editInput;
            }

            // Update the edit status
            let editStatusElement = mentorElement.querySelector('.comment_p_actual_rep');
            if (!editStatusElement) {
                // Create the edited status element if it doesn't exist
                editStatusElement = document.createElement('p');
                editStatusElement.className = 'comment_p_actual_rep';
                editStatusElement.style.color = '#7d7c7c';
                editStatusElement.style.fontWeight = '600';
                editStatusElement.textContent = '( edited )';

                // Insert the edit status element before the question input
                const messageMentorElement = mentorElement.querySelector('.messageMentor');
                if (messageMentorElement) {
                    messageMentorElement.parentNode.insertBefore(editStatusElement, messageMentorElement);
                }
            } else {
                // If the edit status element already exists, ensure it has the correct text
                editStatusElement.textContent = '( edited )';
            }
            //checkContentOverflow(mentorID)
        }
    }


    function editMentorReplySocket(data) {
        const { editReplyInput, mentorID, replyID, actualRedirectId } = data;

        // Find the mentor container by ID
        const mentorElement = document.getElementById(mentorID);

        if (mentorElement) {
            // Find the reply container by ID within the mentor container
            const replyElement = mentorElement.querySelector(`#${CSS.escape(replyID)}`);

            if (replyElement) {
                // Update the question input
                const questionInputElement = replyElement.querySelector('.replyMentor');
                if (questionInputElement) {
                    const controlled_limit_showmoreless = questionInputElement.querySelector('.mentor-content');
                    controlled_limit_showmoreless.textContent = editReplyInput;
                }

                // Update the edit status
                let editStatusElement = replyElement.querySelector('.comment_p_actual_rep');
                if (!editStatusElement) {
                    // Create the edited status element if it doesn't exist
                    editStatusElement = document.createElement('p');
                    editStatusElement.className = 'comment_p_actual_rep';
                    editStatusElement.style.color = '#7d7c7c';
                    editStatusElement.style.fontWeight = '600';
                    editStatusElement.textContent = '( edited )';

                    // Insert the edit status element before the question input
                    const replyMentorElement = replyElement.querySelector('.replyMentor');
                    if (replyMentorElement) {
                        replyMentorElement.parentNode.insertBefore(editStatusElement, replyMentorElement);
                    }
                } else {
                    // If the edit status element already exists, ensure it has the correct text
                    editStatusElement.textContent = '( edited )';
                }
            }
        }
    }


    function viewProfile(profileId) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/view-profile';
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'profileId';
        input.value = profileId;
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }


    window.onload = function() {
        // FUNCTION TO LOAD MORE MENTORS WHEN REACHING TOP OR 30 BELOW OF THE WINDOW
        var topReached = false;
        var initialLoad = true; // Flag to track initial load
        var limit = 15; 
        var skip = parseInt(sessionStorage.getItem('limiterMentor')) || 0; // Initialize skip variable

        async function checkScroll() {
            var scrollPosition = window.scrollY; // Get the current scroll position of the window

            if (initialLoad) {
                initialLoad = false;
                return;
            }

            if (scrollPosition <= 30 && !topReached) {
                topReached = true;

                // Get the current height of the new_mess_container before adding new content
                const container = document.getElementById("new_mess_container");
                const oldHeight = container.scrollHeight;

                let response = await $.ajax({
                    url: '/get_remaining_mentors',
                    method: 'post',
                    data: {
                        skip: skip,
                        limit: limit
                    }
                });

                if (response.success) { 
                    const nem_mentor_s = response.mentors;
                    if (nem_mentor_s && nem_mentor_s.length > 0) {
                        skip += limit; // Update skip value
                        sessionStorage.setItem('limiterMentor', skip);
                        $("#loadingIndicator").show();
                        showLoadingIndicator()

                        nem_mentor_s.forEach(mentor_s => {
                            // Prepend each mentor to the existing posts container
                            $("#new_mess_container").prepend(addMentorWithReplies(mentor_s, userID));
                        });

                        $("#loadingIndicator").hide();
                        
                        // Get the new height of the container after adding new content
                        const newHeight = container.scrollHeight;

                        // Adjust the scroll position by the difference in container height
                        window.scrollTo(0, scrollPosition + (newHeight - oldHeight));
                        hideLoadingIndicator()
                    }
                } else {
                    $("#loadingIndicator").hide();
                    hideLoadingIndicator()
                }

            } else if (scrollPosition > 30) {
                topReached = false;
            }
        }

        scrollToBottom();

        // Listen for scroll events on the window
        window.addEventListener('scroll', checkScroll);
    }


    function getLastReaction(reactions) {
        if (reactions && reactions.length > 0) {
            return reactions[reactions.length - 1].emoji;
        }
        return '';
    }


    function stringifyReactions(reactions) {
        return Array.isArray(reactions) ? JSON.stringify(reactions).replace(/"/g, '&quot;') : '[]';
    }


    function addMentorWithReplies(data, userId) {
        if (typeof userId === 'undefined') {
            console.error('userId is not defined');
            return;
        }

        const  darkEnabler = localStorage.getItem('darkModeARCCEC') === 'enabled';

        // Ensure the parent element exists
        // Ensure the parent element exists
        const newMessContainer = document.getElementById('new_mess_container');
        if (!newMessContainer) {
            console.error('Element with ID "new_mess_container" not found');
            return;
        }

        // Create the main mentor container
        let mentorDiv = document.createElement('div');
        mentorDiv.id = data._id;
        mentorDiv.style.position = 'relative';

        // Create mentor content
        let mentorContent = `
            <div class="mentorcontainer" 
                onmousedown="startPressTimer('${data._id}')" 
                onmouseup="handlePressRelease()" 
                onmouseleave="handlePressRelease()" 
                ontouchstart="startPressTimer('${data._id}')" 
                ontouchend="handlePressRelease()" 
                id="mentor_c_o_ntainr_${data._id}">
                <div class="option_div" onclick="view_mess_options('${data._id}',event)">
                    <i class="fa-solid fa-ellipsis" style="font-size: 22px;"></i>
                    <div class="dropdownND" id="dropdown-${data._id}">
                        <ul>
                            <li onclick="showEmojiPopup('${data._id}',event)">React</li>
                            ${data.userId === userId ? `
                            <li onclick="deleteMentor('${data._id}')">delete</li>
                            <li onclick="showQuestionEditForm('${data._id}', '${data.questionInput}')">edit</li>` : ''}
                        </ul>
                    </div>
                </div>

                <div class="emoji-popup right_color_box" id="emoji-popup-${data._id}" style=" background: ${darkEnabler ? 'linear-gradient(#fff, #606060)': 'white'}; ">
                    <span onclick="selectEmoji('${data._id}', '${data.reactions ? data.reactions.length : 0}', '${stringifyReactions(data.reactions)}', '👍')">👍</span>
                    <span onclick="selectEmoji('${data._id}', '${data.reactions ? data.reactions.length : 0}', '${stringifyReactions(data.reactions)}', '❤️')">❤️</span>
                    <span onclick="selectEmoji('${data._id}', '${data.reactions ? data.reactions.length : 0}', '${stringifyReactions(data.reactions)}', '👎')">👎</span>
                    <span class="close-btn" onclick="closeEmojiPopup('${data._id}',event)">✖</span>
                </div>

                <div class="profile_data">
                    <div class="user-circle">
                        <a style="text-decoration: none;" ${data.userName !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${data.userId}')"` : ''}>
                            <img class="user-image profileImageAlternate" src="/user-images/${data.userId}.jpg" alt="User Image" draggable="false">
                        </a>
                    </div>
                    <div style="margin-left: 10px;">
                        <a style="text-decoration: none;color:black;" ${data.userName !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${data.userId}')"` : ''}>
                            <div class="user-name">${data.userName}</div>
                        </a>
                    </div>
                </div>

                ${data.edit_status ? '<p class="comment_p_actual_rep" style="color: #7d7c7c; font-weight: 600;">( edited )</p>' : ''}
                <div class="messageMentor" id="message-${data._id}">
                    <div class="mentor-content" id="mentor-content-${data._id}">
                        ${data.questionInput}
                    </div>
                    <a href="javascript:void(0)" class="show-more" id="show-more-${data._id}" onclick="toggleContent('${data._id}')">Show More</a>
                </div>

                <div class="reply_del_div">
                    <a class="reply-btn" href="javascript:void(0)" onclick="showReplyForm('${data._id}','${data.questionInput}')"><i class="fas fa-reply"></i></a>
                </div>

                ${data.reactions && Array.isArray(data.reactions) && data.reactions.length > 0 ? `
                <div class="reaction_div" onclick="view_mess_reactionss('${data._id}')">
                    <div class="reaction_thumb"><span class="count_reaction">${data.reactions.length}</span> ${getLastReaction(data.reactions)}</div>
                </div>` : ''}

                <section>
                    <div id="view_reactions_${data._id}" class="popupform_view_reactions right_color_box" style=" background: ${darkEnabler ? 'linear-gradient(#fff, #606060)': 'white'}; ">
                        <p class="close_pop_up_view_reactions" onclick="closePopupViewReactions('${data._id}')">&#10006;</p>
                        <div class="Reaction_body_turnedon" style="margin-top: 50px;">
                            ${data.reactions && Array.isArray(data.reactions) ? data.reactions.map(reaction => `
                            <div class="reaction_divider">
                                <div class="user_circle" style="display: flex;">
                                    <a style="text-decoration: none;cursor:pointer;" ${reaction.user_Name !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${reaction.user_id}')"` : ''}>
                                        <img class="user_image profileImageAlternate" src="/user-images/${reaction.user_id}.jpg" alt="User Image" draggable="false">
                                    </a>
                                </div>
                                <a style="text-decoration: none;display: flex;" ${reaction.user_Name !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${reaction.user_id}')"` : ''}>
                                    <p class="p_in_like_body_turnedon">${reaction.user_Name}</p>
                                </a>
                                <p class="p_emoji">${reaction.emoji}</p>
                            </div>
                            `).join('') : ''}
                            <p class="bot_p_1 blackName" style=" color: ${darkEnabler ? '#414A4C' : 'black'};">press on the emoji once more to remove</p>
                            <p class="bot_p_2 blackName" style=" color: ${darkEnabler ? '#414A4C' : 'black'};">press on other emoji to modify your reaction</p>
                        </div>
                    </div>
                </section>
            </div>
        `;

        // Append mentor content to the mentor container
        mentorDiv.innerHTML = mentorContent;
        newMessContainer.prepend(mentorDiv);
        checkContentOverflow(data._id);

        // Process replies if they exist
        if (data.replies && Array.isArray(data.replies)) {
            data.replies.forEach(reply => {
                let replyDiv = document.createElement('div');
                replyDiv.id = reply._id;
                replyDiv.style.position = 'relative';

                // Determine if it's a reply or a reply to a reply
                let replyMentorContent = '';
                if (reply.Status === 'reply') {
                    replyMentorContent = 
                    `<div class="replyMentor" id="message-reply-${reply._id}">
                        <div class="mentor-content" id="mentor-reply-content-${reply._id}">
                            ${reply.questionInput}
                        </div>
                        <a href="javascript:void(0)" class="show-more" id="show-more-reply-${reply._id}" onclick="toggleReplyContent('${reply._id}')">Show More</a>
                    </div>`;
                } else if (reply.Status === 'replyofreply') {
                    replyMentorContent = 
                    `<div class="replyMentor" id="message-reply-${reply._id}">
                        <div onclick="scrollToOriginReply('${reply.replyId}', '${reply.questionId}')" class="athead_name">@${reply.replytoUsername}</div>
                        <div class="mentor-content" id="mentor-reply-content-${reply._id}">
                            ${reply.questionInput}
                        </div>
                        <a href="javascript:void(0)" class="show-more" id="show-more-reply-${reply._id}" onclick="toggleReplyContent('${reply._id}')">Show More</a>
                    </div>`;
                }

                let replyContent = `
                    <div class="replycontainer" 
                        onmousedown="startPressTimer('${reply._id}')" 
                        onmouseup="handlePressRelease()" 
                        onmouseleave="handlePressRelease()" 
                        ontouchstart="startPressTimer('${reply._id}')" 
                        ontouchend="handlePressRelease()">
                        <div class="option_div" onclick="view_mess_options('${reply._id}',event)">
                            <i class="fa-solid fa-ellipsis" style="font-size: 22px;"></i>
                            <div class="dropdownND" id="dropdown-${reply._id}">
                                <ul>
                                    <li onclick="showReplyEmojiPopup('${reply._id}', '${reply.questionId}',event)">React</li>
                                    ${reply.userId === userId ? `
                                    <li onclick="deleteMentorReply('${reply._id}', '${reply.questionId}')">delete</li>
                                    <li onclick="showReplyReplyEditForm('${reply._id}', '${reply.questionId}', '${reply.questionInput}')">edit</li>` : ''}
                                </ul>
                            </div>
                        </div>

                        <div class="emoji-popup right_color_box" id="emoji-popup-${reply._id}" style=" background: ${darkEnabler ? 'linear-gradient(#fff, #606060)': 'white'};">
                            <span onclick="selectReplyEmoji('${reply._id}', '${reply.questionId}', '${reply.reactions ? reply.reactions.length : 0}', '${stringifyReactions(reply.reactions)}', '👍')">👍</span>
                            <span onclick="selectReplyEmoji('${reply._id}', '${reply.questionId}', '${reply.reactions ? reply.reactions.length : 0}', '${stringifyReactions(reply.reactions)}', '❤️')">❤️</span>
                            <span onclick="selectReplyEmoji('${reply._id}', '${reply.questionId}', '${reply.reactions ? reply.reactions.length : 0}', '${stringifyReactions(reply.reactions)}', '👎')">👎</span>
                            <span class="close-btn" onclick="closeReplyEmojiPopup('${reply._id}','${reply.questionId}', event)">✖</span>
                        </div>

                        <div class="profile_data">
                            <div class="user-circle">
                                <a style="text-decoration: none;" ${reply.userName !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${reply.userId}')"` : ''}>
                                    <img class="user-image profileImageAlternate" src="/user-images/${reply.userId}.jpg" alt="User Image" draggable="false">
                                </a>
                            </div>
                            <div style="margin-left: 10px;">
                                <a style="text-decoration: none;color:black;" ${reply.userName !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${reply.userId}')"` : ''}>
                                    <div class="user-name">${reply.userName}</div>
                                </a>
                            </div>
                        </div>

                        ${reply.edit_status ? '<p class="comment_p_actual_rep" style="color: #7d7c7c; font-weight: 600;">( edited )</p>' : ''}
                        ${replyMentorContent}
                        <div class="reply_del_div">
                            <a class="reply-btn" href="javascript:void(0)" onclick="showReplyReplyForm('${reply._id}','${reply.userName}','${reply.questionId}','${reply.questionInput}')"><i class="fas fa-reply"></i></a>
                        </div>
                        ${reply.reactions && Array.isArray(reply.reactions)  && reply.reactions.length > 0  ? `
                        <div class="reaction_div" onclick="view_mess_reactionss('${reply._id}')">
                            <div class="reaction_thumb"><span class="count_reaction">${reply.reactions.length}</span> ${getLastReaction(reply.reactions)}</div>
                        </div>` : ''}
                        <section>
                            <div id="view_reactions_${reply._id}" class="popupform_view_reactions right_color_box" style=" background: ${darkEnabler ? 'linear-gradient(#fff, #606060)': 'white'};">
                                <p class="close_pop_up_view_reactions" onclick="closePopupViewReactions('${reply._id}')">&#10006;</p>
                                <div class="Reaction_body_turnedon" style="margin-top: 50px;">
                                    ${reply.reactions && Array.isArray(reply.reactions) ? reply.reactions.map(reaction => `
                                    <div class="reaction_divider">
                                        <div class="user_circle" style="display: flex;">
                                            <a style="text-decoration: none;cursor:pointer;" ${reaction.user_Name !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${reaction.user_id}')"` : ''}>
                                                <img class="user_image profileImageAlternate" src="/user-images/${reaction.user_id}.jpg" alt="User Image" draggable="false">
                                            </a>
                                        </div>
                                        <a style="text-decoration: none;display: flex;" ${reaction.user_Name !== "Admin" ? `href="javascript:void(0)" onclick="viewProfile('${reaction.user_id}')"` : ''}>
                                            <p class="p_in_like_body_turnedon">${reaction.user_Name}</p>
                                        </a>
                                        <p class="p_emoji">${reaction.emoji}</p>
                                    </div>
                                    `).join('') : ''}
                                    <p class="bot_p_1 blackName" style=" color: ${darkEnabler ? '#414A4C' : 'black'};">press on the emoji once more to remove</p>
                                    <p class="bot_p_2 blackName" style=" color: ${darkEnabler ? '#414A4C' : 'black'};">press on other emoji to modify your reaction</p>
                                </div>
                            </div>
                        </section>
                    </div>
                `;

                // Append reply content to the reply container
                replyDiv.innerHTML = replyContent;
                mentorDiv.appendChild(replyDiv);
                checkReplyContentOverflow(reply._id)
            });
        }
        mentorDiv.querySelectorAll('.profileImageAlternate').forEach(function(img) {
            img.addEventListener('contextmenu', function(e) {
                e.preventDefault();
            });
            img.addEventListener('dragstart', function(e) {
                e.preventDefault();
            });
            img.onerror = function() {
                this.onerror = null;
                this.src = '/user-images/user.png';
            };
        });
    }


    function limitCharacters(textarea, maxChars) {
        if (textarea.value.length > maxChars) {
            alert("You have reached the maximum allowed characters.");
            textarea.value = textarea.value.substring(0, maxChars);
        }
    }


    function validateInput(input) {
        // Remove leading and trailing spaces and count the non-space characters
        const trimmedValue = input.value.trim();
        const nonSpaceLength = trimmedValue.replace(/\s/g, '').length;

        // Check if the non-space character length is less than 5
        if (nonSpaceLength < 5) {
            input.setCustomValidity("Please enter at least 5 characters (excluding spaces).");
        } else {
            input.setCustomValidity(""); // Clear any existing error
        }
        
        // Optionally, you can enforce a maximum length of 60 characters as well
        if (trimmedValue.length > 60) {
            input.value = trimmedValue.substring(0, 60);
        }
    }



    function toggleContent(mentorId) {
        const content = document.getElementById(`mentor-content-${mentorId}`);
        const showMoreLink = document.getElementById(`show-more-${mentorId}`);

        // Check if the content is currently expanded or not
        if (content.classList.contains('expanded')) {
            // Collapse the content
            content.classList.remove('expanded');
            content.style.maxHeight = 'calc(1.5em * 6)'; // Limit to 6 lines
            showMoreLink.innerText = 'Show More';
        } else {
            // Expand the content
            content.classList.add('expanded');
            content.style.maxHeight = content.scrollHeight + 'px'; // Expand to fit the entire content
            showMoreLink.innerText = 'Show Less';
        }
    }


    // Function to check if the content exceeds 6 lines and enable the "Show More" link
    function checkContentOverflow(mentorId) {
        const content = document.getElementById(`mentor-content-${mentorId}`);
        const showMoreLink = document.getElementById(`show-more-${mentorId}`);
        
        // If the content's scrollHeight exceeds the set max-height (i.e. 6 lines), show the "Show More" link
        if (content.scrollHeight > content.clientHeight) {
            showMoreLink.classList.add('active');
        }
    }


    // After the page loads, check each mentor's content to see if it exceeds 6 lines
    document.querySelectorAll('.messageMentor').forEach((mentorElement) => {
        const mentorId = mentorElement.id.replace('message-', '');
        checkContentOverflow(mentorId);
    });


    function toggleReplyContent(replyId) {
        const contentReply = document.getElementById(`mentor-reply-content-${replyId}`);
        const showMoreReplyLink = document.getElementById(`show-more-reply-${replyId}`);

        // Check if the contentReply is currently expanded or not
        if (contentReply.classList.contains('expanded')) {
            // Collapse the contentReply
            contentReply.classList.remove('expanded');
            contentReply.style.maxHeight = 'calc(1.5em * 6)'; // Limit to 6 lines
            showMoreReplyLink.innerText = 'Show More';
        } else {
            // Expand the contentReply
            contentReply.classList.add('expanded');
            contentReply.style.maxHeight = contentReply.scrollHeight + 'px'; // Expand to fit the entire contentReply
            showMoreReplyLink.innerText = 'Show Less';
        }
    }


    // Function to check if the contentReply exceeds 6 lines and enable the "Show More" link
    function checkReplyContentOverflow(replyId) {
        const contentReply = document.getElementById(`mentor-reply-content-${replyId}`);
        const showMoreReplyLink = document.getElementById(`show-more-reply-${replyId}`);
        
        // If the contentReply's scrollHeight exceeds the set max-height (i.e. 6 lines), show the "Show More" link
        if (contentReply.scrollHeight > contentReply.clientHeight) {
            showMoreReplyLink.classList.add('active');
        }
    }


    // After the page loads, check each mentor's contentReply to see if it exceeds 6 lines
    document.querySelectorAll('.replyMentor').forEach((mentorReplyElement) => {
        const replyId = mentorReplyElement.id.replace('message-reply-', '');
        checkReplyContentOverflow(replyId);
    });


    function showLoadingIndicator() {
        $('#loading-indicator_loader').show();
        $('body').css('overflow', 'hidden');
    }


    function hideLoadingIndicator() {
        $('#loading-indicator_loader').hide();
        $('body').css('overflow', 'auto');
    }

</script>
