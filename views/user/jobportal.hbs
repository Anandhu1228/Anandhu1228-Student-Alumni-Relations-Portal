<!-- 
Website developed by Anandhu Mohan for the Alumni Relations Cell of a college. 
Features include:
  - Job portal, Internship portal, Mentorship portal
  - Search functionality for users, students, and alumni
  - Group chat and private individual chat systems
  - Notification system and user profiles for each member
  - Admin panel to control the entire site, handle issues, and manage inquiries
  - Superadmin overseeing the activities of admins and users
  - Maintainer responsible for the main page content and styling, visible to users and external visitors
  - Advanced machine learning features that sort jobs and internships based on user profile preferences
  - Periodic email notifications and security enhancements
-->

<style>

    .jobss{
       background-color: rgba(255, 255, 255, 0.8);
       width: 100%;margin-top: 50px;
       border-radius: 20px;
       border: none;
       box-shadow: 0 0px 4px rgba(0, 0, 0, 0.6);
       margin-bottom: 50px;
    }

    .request_button{
        width: 100%;
        padding: 10px;
        border-radius: 20px;
        background-color: rgb(38, 82, 164);
        font-weight: 700;
        text-decoration: none;
        color: white;
    }
    
    .request_button:hover{
        border-radius: 20px;
        color: white;
    }

    .btn_sort{
        margin-left: auto;
        background-color: rgb(93, 138, 222);
        padding: 8px;
        color: white;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }
    
    .btn_sort:hover{
        background-color: rgb(43, 92, 182);
        color: white;
    }

    body{
        background-image: url('/images/logo_transparent1.png');
        background-size: 70% auto;
        background-position: center bottom 55%;
        background-repeat: no-repeat;
        background-color: aliceblue;
        background-attachment: fixed;
    }
    
    @media (max-width: 768px) {
        body {
            background-image: url('/images/logo1.png');
            background-position: center bottom 40%;
        }
    }
    
    .sec-top{
        padding-top: 170px; 
        display: flex; 
        justify-content: flex-end;
    }

    .jobDetail{
        font-weight: 500;
    }

    .profile_image_jobportal{
        width: 50px;
        border-radius: 50%;
    }

    .job_posted_name{
        font-weight: bolder;
    }

    @media (max-width: 400px) {
        .profile_image_jobportal{
            width: 40px;
            border-radius: 50%;
        }

        .job_posted_name{
            font-weight: bolder;
            font-size: 15px;
        }
    }


    @media (max-width: 1251px) {
        .sec-top{
            padding-top: 150px; 
        }
    }

    @media (max-width: 550px) {
        .sec-top{
            padding-top: 145px; 
        }
    }
    
    @media (max-width: 1199px) {
        .btn_sort{
            font-size: 14px;
        }
    }
    
    @media (max-width: 767px) {
        .btn_sort{
            font-size: 13px;
            font-weight: 500;
            padding: 6px;
        }
    }
    
    @media (max-width: 500px) {
        .btn_sort{
            font-size: 12px;
            font-weight: 500;
            padding: 5px;
        }
    }

    .profileImageAlternate {
        -webkit-user-drag: none;  /* Safari */
        user-drag: none;           /* Non-prefixed version */
    }

    .btn_apply_job{
        background-color: rgb(38, 82, 164);
        color: white;
        font-weight: 500;
    }

    @media (max-width: 767px) {
        .btn_apply_job{
            font-size: 15px;
            padding: 6px;
        }
    }

    .job_you{
        align-items: center;
        text-align: center;
        font-weight: 500;
        color: rgba(28, 56, 107, 0.5);
        margin-bottom: 0px;
        margin-top: 10px;
    }

    @media (max-width: 865px) {
        .job_you{
            font-size: 13px; 
        }
    }

    #loading-indicator{
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
    }

    #loading-indicator p{
        margin: 10px 0;
        font-size: 18px;
        font-weight: bold;
    }

    #loading-indicator .spinner{
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    } 

</style>

<section class="sec-top" >
    {{#if machinesort}}
        <a href="/job_portal" class="btn btn_sort darkcolorchanger2">Sort based on time (newest first)</a>
    {{/if}}
    {{#if timesort}}
        <a href="/jobportal" class="btn btn_sort darkcolorchanger2">Sort based on your preference</a>
    {{/if}}
</section>
<p class="job_you">Jobs posted by you won't appear here for you</p>

<section class="container" >
    {{#each jobs}}
    <div class="card jobss" >
        <img class="card-img-top" src="/job-images/{{this._id}}.jpg" alt="No image available">
        <div class="card-body">
            <h5 style="font-weight:bold;" class="card-title">Job Details</h5><br>
            <h6><strong>Company Name</strong></h6>
            <p class="card-text jobDetail">{{this.CompanyName}}</p>
            {{#if this.CompanyDescription}}
            <h6><strong>Company Description</strong></h6>
            <p class="card-text jobDetail">{{this.CompanyDescription}}</p>
            {{/if}}
            <h6><strong>Job Role</strong></h6>
            <p class="card-text jobDetail">{{this.Jobrole}}</p>
            <h6><strong>Eligibility</strong></h6>
            <p class="card-text jobDetail">{{this.Eligibility}}</p>
            {{#if this.JobLink}}
                <a href="{{this.JobLink}}" class="btn btn_apply_job darkcolorchanger2" style="margin-bottom:20px;">Apply</a>
            {{/if}}
            <h6 style=""><strong>Posted by : </strong></h6>
            <div style="display: inline-block;padding:20px">
                {{#if this.PostedBy}}
                <a href="javascript:void(0)" {{#compare this.Name "!==" "Admin"}} onclick="viewProfile('{{this.UserId}}')" {{/compare}}>
                {{/if}}
                    <img class="profile_image_jobportal profileImageAlternate" src="/user-images/{{this.UserId}}.jpg" alt="Card image cap" style="width: 50px;height: 50px;border-radius: 50%;object-fit:contain" draggable="false">
                {{#if this.PostedBy}}
                </a>
                {{/if}}
            </div>
            <div style="display: inline-block;">
                {{#if this.PostedBy}}
                    <a style="text-decoration: none;color:black;" href="javascript:void(0)" {{#compare this.Name "!==" "Admin"}} onclick="viewProfile('{{this.UserId}}')" {{/compare}}>
                {{/if}}
                    <p class="job_posted_name">{{this.Name}}</p>
                {{#if this.PostedBy}}
                </a>
                {{/if}}
            </div>
            <div style="display: flex;border-radius:20px;background-color:white;">
                    <a  href="javascript:void(0)" onclick="sendJobRequest('{{../userId}}','{{this._id}}', this)" class="btn  request_button darkcolorchanger2" data-request="{{#if this.not_requested}}not_requested{{/if}}{{#if this.requested}}requested{{/if}}">{{#if this.not_requested}}Send request{{/if}}{{#if this.requested}}requested{{/if}}</a>
            </div>
        </div>
    </div>
    {{/each}}
    <div id="new_mess_container">
        {{!-- This is where new messages will be appended --}}
    </div>
    <div id="loadingIndicator" style="display:none; text-align: center; margin-top: -40px;">
        <p style="font-weight: bold;">Loading.........</p>
    </div>
</section>

<div id="loading-indicator">
    <div class="spinner"></div>
    <p>Loading...</p>
</div>

<script>

    sessionStorage.setItem("limiterjob", '{{limit}}');
    const userID = '{{userId}}'
    const machinesort = '{{machinesort}}'
    const timesort = '{{timesort}}'
    let URL = null
    if(timesort == "true"){
        URL = '/get_remaining_jobs'
    } else if(machinesort == "true"){
        URL = '/get_remaining_job'
    }

    function viewProfile(profileId) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/view-profile';
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'profileId';
        input.value = profileId;
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }


    function sendJobRequest(userId, job_id, button) {
        fetch('/send_job_request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId: userId, job_id: job_id })
        })
        .then(response => {
            if (response.ok) {
                // Update button status and color based on current status
                const requestData = button.getAttribute('data-request');
                if (requestData === 'not_requested') {
                    button.textContent = 'Requested';
                    button.classList.remove('btn-primary');
                    button.classList.add('btn-secondary');
                    button.setAttribute('data-request', 'requested');
                } else if (requestData === 'requested') {
                    button.textContent = 'Send request';
                    button.classList.remove('btn-secondary');
                    button.classList.add('request_button');
                    button.setAttribute('data-request', 'not_requested');
                }
            } else {
                console.error('Failed to send job request');
            }
        })
        .catch(error => {
            console.error('Error sending job request:', error);
        });
    }


    function sendTimestampOnUnload() {
        const timestamp = new Date().toISOString();

        // Use navigator.sendBeacon for asynchronous data transmission during unload
        const url = '/send_timestamp_leave_jobportal';
        const body = JSON.stringify({ timestamp });
        const blob = new Blob([body], { type: 'application/json' });

        navigator.sendBeacon(url, blob);
        //window.location.reload();
    }
    window.addEventListener('beforeunload', sendTimestampOnUnload);


    window.onload = function() {
        let bottomReached = false;
        let initialLoad = true; // Flag to track initial load
        const limit = 10;
        let skip = parseInt(sessionStorage.getItem('limiterjob')) || 0; // Initialize skip variable

        async function checkScroll() {
            const scrollPosition = window.scrollY; // Current scroll position
            const windowHeight = window.innerHeight; // Height of the viewport
            const documentHeight = document.documentElement.scrollHeight; // Total scrollable height of the document

            if (initialLoad) {
                initialLoad = false;
                return;
            }

            // Check if the user has scrolled near the bottom
            if ((scrollPosition + windowHeight >= documentHeight - 30) && !bottomReached) {
                bottomReached = true;

                // Show the loading indicator
                $("#loadingIndicator").show();
                showLoadingIndicator();

                let response = await $.ajax({
                    url: URL,
                    method: 'post',
                    data: {
                        skip: skip,
                        limit: limit
                    }
                });

                if (response.success) {
                    const nem_job_s = response.jobs;
                    if (nem_job_s && nem_job_s.length > 0) {
                        skip += limit; // Update skip value
                        sessionStorage.setItem('limiterjob', skip);

                        nem_job_s.forEach(job_s => {
                            // Append each job to the existing posts container
                            $("#new_mess_container").append(createJobCard(job_s));
                        });

                        // Hide the loading indicator
                        $("#loadingIndicator").hide();
                        hideLoadingIndicator();
                    } else {
                        // Hide the loading indicator if no more jobs
                        $("#loadingIndicator").hide();
                        hideLoadingIndicator();
                    }
                } else {
                    // Hide the loading indicator on error
                    $("#loadingIndicator").hide();
                    hideLoadingIndicator();
                }
            } else if (scrollPosition + windowHeight < documentHeight - 30) {
                bottomReached = false;
            }
        }

        // Listen for scroll events on the window
        window.addEventListener('scroll', checkScroll);
    };


    function createJobCard(job) {
        const card = document.createElement('div');
        card.className = 'card jobss';

        // Image
        const img = document.createElement('img');
        img.className = 'card-img-top';
        img.src = `/job-images/${job._id}.jpg`;
        img.alt = 'No image available';
        card.appendChild(img);

        // Card body
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body';

        // Job Details
        const jobTitle = document.createElement('h5');
        jobTitle.style.fontWeight = 'bold';
        jobTitle.className = 'card-title';
        jobTitle.textContent = 'Job Details';
        cardBody.appendChild(jobTitle);
        cardBody.appendChild(document.createElement('br'));

        // Company Name
        const companyNameHeading = document.createElement('h6');
        companyNameHeading.innerHTML = '<strong>Company Name</strong>';
        cardBody.appendChild(companyNameHeading);

        const companyNameText = document.createElement('p');
        companyNameText.className = 'card-text jobDetail';
        companyNameText.textContent = job.CompanyName;
        cardBody.appendChild(companyNameText);

        // Company Description
        if (job.CompanyDescription) {
            const companyDescHeading = document.createElement('h6');
            companyDescHeading.innerHTML = '<strong>Company Description</strong>';
            cardBody.appendChild(companyDescHeading);

            const companyDescText = document.createElement('p');
            companyDescText.className = 'card-text jobDetail';
            companyDescText.textContent = job.CompanyDescription;
            cardBody.appendChild(companyDescText);
        }

        // Job Role
        const jobRoleHeading = document.createElement('h6');
        jobRoleHeading.innerHTML = '<strong>Job Role</strong>';
        cardBody.appendChild(jobRoleHeading);

        const jobRoleText = document.createElement('p');
        jobRoleText.className = 'card-text jobDetail';
        jobRoleText.textContent = job.Jobrole;
        cardBody.appendChild(jobRoleText);

        // Eligibility
        const eligibilityHeading = document.createElement('h6');
        eligibilityHeading.innerHTML = '<strong>Eligibility</strong>';
        cardBody.appendChild(eligibilityHeading);

        const eligibilityText = document.createElement('p');
        eligibilityText.className = 'card-text jobDetail';
        eligibilityText.textContent = job.Eligibility;
        cardBody.appendChild(eligibilityText);

        // Job Link
        if (job.JobLink) {
            const applyButton = document.createElement('a');
            applyButton.href = job.JobLink;
            applyButton.className = 'btn btn_apply_job darkcolorchanger2';
            applyButton.style.marginBottom = '20px';
            applyButton.textContent = 'Apply';
            cardBody.appendChild(applyButton);
        }

        // Posted By
        const postedByHeading = document.createElement('h6');
        postedByHeading.innerHTML = '<strong>Posted by : </strong>';
        cardBody.appendChild(postedByHeading);

        const postedByContainer = document.createElement('div');
        postedByContainer.style.display = 'inline-block';
        postedByContainer.style.padding = '20px';

        if (job.PostedBy) {
            const profileLink = document.createElement('a');
            if (job.Name !== 'Admin') {
                profileLink.href = 'javascript:void(0)';
                profileLink.onclick = () => viewProfile(job.UserId);
            }

            const profileImg = document.createElement('img');
            profileImg.className = 'profile_image_jobportal profileImageAlternate';
            profileImg.src = `/user-images/${job.UserId}.jpg`;
            profileImg.alt = 'Card image cap';
            profileImg.style = 'width: 50px;height: 50px;border-radius: 50%;object-fit:contain';
            profileImg.draggable = false;

            profileLink.appendChild(profileImg);
            postedByContainer.appendChild(profileLink);
        }

        cardBody.appendChild(postedByContainer);

        const postedByNameContainer = document.createElement('div');
        postedByNameContainer.style.display = 'inline-block';

        if (job.PostedBy) {
            const nameLink = document.createElement('a');
            nameLink.style.textDecoration = 'none';
            nameLink.style.color = 'black';
            nameLink.href = 'javascript:void(0)';
            if (job.Name !== 'Admin') {
                nameLink.onclick = () => viewProfile(job.UserId);
            }

            const nameText = document.createElement('p');
            nameText.className = 'job_posted_name';
            nameText.textContent = job.Name;
            nameLink.appendChild(nameText);

            postedByNameContainer.appendChild(nameLink);
        }

        cardBody.appendChild(postedByNameContainer);

        // Request Button
        const requestContainer = document.createElement('div');
        requestContainer.style = 'display: flex;border-radius:20px;background-color:white;';

        const requestButton = document.createElement('a');
        requestButton.href = 'javascript:void(0)';
        requestButton.className = 'btn request_button darkcolorchanger2';
        requestButton.setAttribute('data-request', job.not_requested ? 'not_requested' : 'requested');
        requestButton.onclick = () => sendJobRequest(userID, job._id, requestButton);
        requestButton.textContent = job.not_requested ? 'Send request' : 'requested';

        requestContainer.appendChild(requestButton);
        cardBody.appendChild(requestContainer);

        card.appendChild(cardBody);

        return card;
    }


    function showLoadingIndicator() {
        $('#loading-indicator').show();
        $('body').css('overflow', 'hidden');
    }


    function hideLoadingIndicator() {
        $('#loading-indicator').hide();
        $('body').css('overflow', 'auto');
    }

</script>
